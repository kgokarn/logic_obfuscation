# BENCH FILE 
# circuit:ripple_carry_adder16_netlist.v

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( add2_i[9], n47 )
result_o[8] = xor( add2_i[8], n48 )
result_o[7] = xor( add2_i[7], n49 )
result_o[6] = xor( add2_i[6], n50 )
result_o[5] = xor( add2_i[5], n51 )
result_o[4] = xor( add2_i[4], n52 )
result_o[3] = xor( add2_i[3], n53 )
result_o[2] = xor( add2_i[2], n54 )
result_o[1] = xor( n55, add2_i[1] )
result_o[15] = xor( add2_i[15], n58 )
n58 = xor( n59, add1_i[15] )
result_o[14] = xor( add2_i[14], n62 )
n62 = xor( n63, add1_i[14] )
result_o[13] = xor( add2_i[13], n66 )
n66 = xor( n67, add1_i[13] )
result_o[12] = xor( add2_i[12], n70 )
n70 = xor( n71, add1_i[12] )
result_o[11] = xor( add2_i[11], n74 )
n74 = xor( n75, add1_i[11] )
result_o[10] = xor( add2_i[10], n78 )
n78 = xor( n79, add1_i[10] )
n47 = xor( n82, add1_i[9] )
n48 = xor( n85, add1_i[8] )
n49 = xor( n88, add1_i[7] )
n50 = xor( n91, add1_i[6] )
n51 = xor( n94, add1_i[5] )
n52 = xor( n97, add1_i[4] )
n53 = xor( n100, add1_i[3] )
n54 = xor( n103, add1_i[2] )
n55 = xor( n106, add1_i[1] )
n106 = or( add2_i[0], add1_i[0] )
n100 = nand( n101, n102 )
n101 = nand( add1_i[2], n103 )
n102 = nand( add2_i[2], n54 )
n97 = nand( n98, n99 )
n98 = nand( add1_i[3], n100 )
n99 = nand( add2_i[3], n53 )
n94 = nand( n95, n96 )
n95 = nand( add1_i[4], n97 )
n96 = nand( add2_i[4], n52 )
n91 = nand( n92, n93 )
n92 = nand( add1_i[5], n94 )
n93 = nand( add2_i[5], n51 )
n79 = nand( n80, n81 )
n80 = nand( add1_i[9], n82 )
n81 = nand( add2_i[9], n47 )
n75 = nand( n76, n77 )
n76 = nand( add1_i[10], n79 )
n77 = nand( add2_i[10], n78 )
n71 = nand( n72, n73 )
n72 = nand( add1_i[11], n75 )
n73 = nand( add2_i[11], n74 )
n67 = nand( n68, n69 )
n68 = nand( add1_i[12], n71 )
n69 = nand( add2_i[12], n70 )
n63 = nand( n64, n65 )
n64 = nand( add1_i[13], n67 )
n65 = nand( add2_i[13], n66 )
n59 = nand( n60, n61 )
n60 = nand( add1_i[14], n63 )
n61 = nand( add2_i[14], n62 )
n88 = nand( n89, n90 )
n89 = nand( add1_i[6], n91 )
n90 = nand( add2_i[6], n50 )
n85 = nand( n86, n87 )
n86 = nand( add1_i[7], n88 )
n87 = nand( add2_i[7], n49 )
n82 = nand( n83, n84 )
n83 = nand( add1_i[8], n85 )
n84 = nand( add2_i[8], n48 )
n103 = nand( n104, n105 )
n105 = nand( add1_i[1], n106 )
n104 = nand( add2_i[1], n55 )
result_o[16] = nand( n56, n57 )
n56 = nand( add1_i[15], n59 )
n57 = nand( add2_i[15], n58 )
result_o[0] = nand( n106, n107 )
n107 = nand( add2_i[0], add1_i[0] )
