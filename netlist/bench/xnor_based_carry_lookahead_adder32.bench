# BENCH FILE 
# circuit:xnor_based_carry_lookahead_adder32_netlist.v

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add1_i[16])
INPUT(add1_i[17])
INPUT(add1_i[18])
INPUT(add1_i[19])
INPUT(add1_i[20])
INPUT(add1_i[21])
INPUT(add1_i[22])
INPUT(add1_i[23])
INPUT(add1_i[24])
INPUT(add1_i[25])
INPUT(add1_i[26])
INPUT(add1_i[27])
INPUT(add1_i[28])
INPUT(add1_i[29])
INPUT(add1_i[30])
INPUT(add1_i[31])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(add2_i[16])
INPUT(add2_i[17])
INPUT(add2_i[18])
INPUT(add2_i[19])
INPUT(add2_i[20])
INPUT(add2_i[21])
INPUT(add2_i[22])
INPUT(add2_i[23])
INPUT(add2_i[24])
INPUT(add2_i[25])
INPUT(add2_i[26])
INPUT(add2_i[27])
INPUT(add2_i[28])
INPUT(add2_i[29])
INPUT(add2_i[30])
INPUT(add2_i[31])
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
OUTPUT(result_o[17])
OUTPUT(result_o[18])
OUTPUT(result_o[19])
OUTPUT(result_o[20])
OUTPUT(result_o[21])
OUTPUT(result_o[22])
OUTPUT(result_o[23])
OUTPUT(result_o[24])
OUTPUT(result_o[25])
OUTPUT(result_o[26])
OUTPUT(result_o[27])
OUTPUT(result_o[28])
OUTPUT(result_o[29])
OUTPUT(result_o[30])
OUTPUT(result_o[31])
OUTPUT(result_o[32])
result_o[9] = xor( n412, n413 )
n413 = xor( add2_i[9], add1_i[9] )
result_o[8] = xor( n414, n415 )
n415 = xor( add2_i[8], add1_i[8] )
result_o[31] = xor( n429, n430 )
n430 = xor( add2_i[31], add1_i[31] )
result_o[30] = xor( n434, n435 )
n435 = xor( add2_i[30], add1_i[30] )
result_o[29] = xor( n439, n442 )
n442 = xor( add2_i[29], add1_i[29] )
result_o[28] = xor( n446, n447 )
n447 = xor( add2_i[28], add1_i[28] )
result_o[27] = xor( n451, n452 )
n452 = xor( add2_i[27], add1_i[27] )
result_o[26] = xor( n456, n457 )
n457 = xor( add2_i[26], add1_i[26] )
result_o[25] = xor( n461, n462 )
n462 = xor( add2_i[25], add1_i[25] )
result_o[24] = xor( n466, n467 )
n467 = xor( add2_i[24], add1_i[24] )
result_o[23] = xor( n471, n472 )
n472 = xor( add2_i[23], add1_i[23] )
result_o[22] = xor( n476, n477 )
n477 = xor( add2_i[22], add1_i[22] )
result_o[21] = xor( n481, n482 )
n482 = xor( add2_i[21], add1_i[21] )
result_o[20] = xor( n486, n487 )
n487 = xor( add2_i[20], add1_i[20] )
n493 = xor( add2_i[1], add1_i[1] )
result_o[19] = xor( n491, n494 )
n494 = xor( add2_i[19], add1_i[19] )
result_o[18] = xor( n498, n499 )
n499 = xor( add2_i[18], add1_i[18] )
result_o[17] = xor( n503, n504 )
n504 = xor( add2_i[17], add1_i[17] )
result_o[16] = xor( n508, n509 )
n509 = xor( add2_i[16], add1_i[16] )
result_o[15] = xor( n513, n514 )
n514 = xor( add2_i[15], add1_i[15] )
result_o[14] = xor( n518, n519 )
n519 = xor( add2_i[14], add1_i[14] )
result_o[13] = xor( n523, n524 )
n524 = xor( add2_i[13], add1_i[13] )
result_o[12] = xor( n528, n529 )
n529 = xor( add2_i[12], add1_i[12] )
result_o[11] = xor( n533, n534 )
n534 = xor( add2_i[11], add1_i[11] )
result_o[10] = xor( n538, n539 )
n539 = xor( add2_i[10], add1_i[10] )
n580 = not( add2_i[7] )
n586 = not( add2_i[11] )
n588 = not( add2_i[20] )
n582 = not( add2_i[12] )
n496 = nand( add2_i[18], n568 )
n568 = or( n498, add1_i[18] )
n584 = not( add2_i[21] )
n511 = nand( n569, add2_i[15] )
n569 = or( n513, add1_i[15] )
n570 = or( n581, n580 )
n617 = and( n570, n571 )
n571 = and( n572, n546 )
n572 = not( add1_i[8] )
n573 = or( n587, n586 )
n583 = and( n573, n574 )
n574 = and( n575, n530 )
n575 = not( add1_i[12] )
n576 = or( n589, n588 )
n585 = and( n576, n577 )
n577 = and( n578, n483 )
n578 = not( add1_i[21] )
n579 = or( add2_i[0], add1_i[0] )
n616 = not( add2_i[8] )
n608 = not( add2_i[13] )
n547 = or( n580, n581 )
n581 = nor( n417, add1_i[7] )
n526 = or( n582, n583 )
n479 = or( n584, n585 )
n612 = not( add2_i[5] )
n626 = not( add2_i[14] )
n628 = not( add2_i[29] )
n614 = not( add2_i[19] )
n610 = not( add2_i[22] )
n618 = not( add2_i[27] )
n606 = not( add2_i[10] )
n624 = not( add2_i[17] )
n531 = or( n586, n587 )
n587 = nor( n533, add1_i[11] )
n484 = or( n588, n589 )
n589 = nor( n486, add1_i[20] )
n602 = not( add2_i[6] )
n604 = not( add2_i[9] )
n622 = not( add2_i[16] )
result_o[7] = and( n417, n590 )
n590 = xnor( add2_i[7], add1_i[7] )
result_o[6] = and( n419, n591 )
n591 = xnor( add2_i[6], add1_i[6] )
result_o[3] = and( n425, n592 )
n592 = xnor( add2_i[3], add1_i[3] )
result_o[2] = and( n441, n593 )
n593 = xnor( add2_i[2], add1_i[2] )
result_o[4] = and( n423, n594 )
n594 = xnor( add2_i[4], add1_i[4] )
result_o[5] = and( n421, n595 )
n595 = xnor( add2_i[5], add1_i[5] )
n492 = nor( add2_i[0], add1_i[0] )
n620 = not( add2_i[4] )
n607 = and( n541, n596 )
n596 = and( n540, n597 )
n597 = not( add1_i[10] )
n598 = or( n623, n622 )
n625 = and( n598, n599 )
n599 = and( n600, n505 )
n600 = not( add1_i[17] )
n601 = or( add2_i[0], add1_i[0] )
result_o[1] = nor( n492, n493 )
n567 = nand( add2_i[0], add1_i[0] )
n550 = or( n603, n602 )
n603 = nor( n419, add1_i[6] )
n541 = or( n605, n604 )
n605 = nor( n412, add1_i[9] )
n536 = or( n606, n607 )
n521 = or( n609, n608 )
n609 = nor( n523, add1_i[13] )
n474 = or( n611, n610 )
n611 = nor( n476, add1_i[22] )
n553 = or( n613, n612 )
n613 = nor( n421, add1_i[5] )
n489 = or( n614, n615 )
n615 = nor( n491, add1_i[19] )
n544 = or( n616, n617 )
n449 = or( n618, n619 )
n619 = nor( n451, add1_i[27] )
n556 = or( n620, n621 )
n621 = nor( n423, add1_i[4] )
n506 = or( n622, n623 )
n623 = nor( n508, add1_i[16] )
n501 = or( n624, n625 )
n423 = nand( n558, n559 )
n425 = nand( n561, n562 )
n559 = nand( add2_i[3], n560 )
n516 = or( n626, n627 )
n627 = nor( n518, add1_i[14] )
n437 = or( n628, n629 )
n629 = nor( n439, add1_i[29] )
n481 = nand( n483, n484 )
n533 = nand( n536, n535 )
n562 = nand( add2_i[2], n563 )
n414 = nand( n546, n547 )
n446 = nand( n449, n448 )
result_o[0] = nand( n579, n567 )
result_o[32] = nand( n426, n427 )
n476 = nand( n478, n479 )
n498 = nand( n501, n500 )
n528 = nand( n530, n531 )
n564 = nand( add1_i[1], n579 )
n566 = or( n601, add1_i[1] )
n513 = nand( n515, n516 )
n421 = nand( n556, n555 )
n427 = nand( add2_i[31], n428 )
n429 = nand( n431, n432 )
n461 = nand( n463, n464 )
n432 = nand( add2_i[30], n433 )
n436 = nand( add1_i[29], n439 )
n453 = nand( add1_i[26], n456 )
n455 = or( n456, add1_i[26] )
n464 = nand( add2_i[24], n465 )
n468 = nand( add1_i[23], n471 )
n470 = or( n471, add1_i[23] )
n473 = nand( add1_i[22], n476 )
n488 = nand( add1_i[19], n491 )
n505 = nand( add1_i[16], n508 )
n520 = nand( add1_i[13], n523 )
n525 = nand( add1_i[12], n528 )
n540 = nand( add1_i[9], n412 )
n543 = nand( add1_i[8], n414 )
n555 = nand( add1_i[4], n423 )
n561 = nand( add1_i[2], n441 )
n563 = or( n441, add1_i[2] )
n426 = nand( add1_i[31], n429 )
n428 = or( n429, add1_i[31] )
n431 = nand( add1_i[30], n434 )
n433 = or( n434, add1_i[30] )
n443 = nand( add1_i[28], n446 )
n445 = or( n446, add1_i[28] )
n448 = nand( add1_i[27], n451 )
n458 = nand( add1_i[25], n461 )
n460 = or( n461, add1_i[25] )
n463 = nand( add1_i[24], n466 )
n465 = or( n466, add1_i[24] )
n478 = nand( add1_i[21], n481 )
n483 = nand( add1_i[20], n486 )
n495 = nand( add1_i[18], n498 )
n500 = nand( add1_i[17], n503 )
n510 = nand( add1_i[15], n513 )
n515 = nand( add1_i[14], n518 )
n530 = nand( add1_i[11], n533 )
n535 = nand( add1_i[10], n538 )
n546 = nand( add1_i[7], n417 )
n549 = nand( add1_i[6], n419 )
n552 = nand( add1_i[5], n421 )
n558 = nand( add1_i[3], n425 )
n560 = or( n425, add1_i[3] )
n439 = nand( n443, n444 )
n444 = nand( add2_i[28], n445 )
n434 = nand( n436, n437 )
n456 = nand( n458, n459 )
n459 = nand( n460, add2_i[25] )
n451 = nand( n453, n454 )
n454 = nand( add2_i[26], n455 )
n471 = nand( n474, n473 )
n466 = nand( n468, n469 )
n469 = nand( n470, add2_i[23] )
n491 = nand( n495, n496 )
n486 = nand( n489, n488 )
n508 = nand( n510, n511 )
n503 = nand( n505, n506 )
n523 = nand( n525, n526 )
n518 = nand( n521, n520 )
n412 = nand( n544, n543 )
n538 = nand( n541, n540 )
n419 = nand( n553, n552 )
n417 = nand( n550, n549 )
n441 = nand( n565, n564 )
n565 = nand( n566, add2_i[1] )
