# BENCH FILE 
# circuit:lower_part_or_carry_lookahead_adder32_netlist.v

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add1_i[16])
INPUT(add1_i[17])
INPUT(add1_i[18])
INPUT(add1_i[19])
INPUT(add1_i[20])
INPUT(add1_i[21])
INPUT(add1_i[22])
INPUT(add1_i[23])
INPUT(add1_i[24])
INPUT(add1_i[25])
INPUT(add1_i[26])
INPUT(add1_i[27])
INPUT(add1_i[28])
INPUT(add1_i[29])
INPUT(add1_i[30])
INPUT(add1_i[31])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(add2_i[16])
INPUT(add2_i[17])
INPUT(add2_i[18])
INPUT(add2_i[19])
INPUT(add2_i[20])
INPUT(add2_i[21])
INPUT(add2_i[22])
INPUT(add2_i[23])
INPUT(add2_i[24])
INPUT(add2_i[25])
INPUT(add2_i[26])
INPUT(add2_i[27])
INPUT(add2_i[28])
INPUT(add2_i[29])
INPUT(add2_i[30])
INPUT(add2_i[31])
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
OUTPUT(result_o[17])
OUTPUT(result_o[18])
OUTPUT(result_o[19])
OUTPUT(result_o[20])
OUTPUT(result_o[21])
OUTPUT(result_o[22])
OUTPUT(result_o[23])
OUTPUT(result_o[24])
OUTPUT(result_o[25])
OUTPUT(result_o[26])
OUTPUT(result_o[27])
OUTPUT(result_o[28])
OUTPUT(result_o[29])
OUTPUT(result_o[30])
OUTPUT(result_o[31])
OUTPUT(result_o[32])
result_o[9] = xor( n28, n29 )
n29 = xor( add2_i[9], add1_i[9] )
result_o[8] = xor( n30, n31 )
n31 = xor( add2_i[8], add1_i[8] )
result_o[31] = xor( n35, n36 )
n36 = xor( add2_i[31], add1_i[31] )
result_o[30] = xor( n40, n41 )
n41 = xor( add2_i[30], add1_i[30] )
result_o[29] = xor( n45, n46 )
n46 = xor( add2_i[29], add1_i[29] )
result_o[28] = xor( n50, n51 )
n51 = xor( add2_i[28], add1_i[28] )
result_o[27] = xor( n55, n56 )
n56 = xor( add2_i[27], add1_i[27] )
result_o[26] = xor( n60, n61 )
n61 = xor( add2_i[26], add1_i[26] )
result_o[25] = xor( n65, n66 )
n66 = xor( add2_i[25], add1_i[25] )
result_o[24] = xor( n70, n71 )
n71 = xor( add2_i[24], add1_i[24] )
result_o[23] = xor( n75, n76 )
n76 = xor( add2_i[23], add1_i[23] )
result_o[22] = xor( n80, n81 )
n81 = xor( add2_i[22], add1_i[22] )
result_o[21] = xor( n85, n86 )
n86 = xor( add2_i[21], add1_i[21] )
result_o[20] = xor( n90, n91 )
n91 = xor( add2_i[20], add1_i[20] )
result_o[19] = xor( n95, n96 )
n96 = xor( add2_i[19], add1_i[19] )
result_o[18] = xor( n100, n101 )
n101 = xor( add2_i[18], add1_i[18] )
result_o[17] = xor( n105, n106 )
n106 = xor( add2_i[17], add1_i[17] )
result_o[16] = xor( n110, n111 )
n111 = xor( add2_i[16], add1_i[16] )
result_o[15] = xor( n115, n116 )
n116 = xor( add2_i[15], add1_i[15] )
result_o[14] = xor( n120, n121 )
n121 = xor( add2_i[14], add1_i[14] )
result_o[13] = xor( n125, n126 )
n126 = xor( add2_i[13], add1_i[13] )
result_o[12] = xor( n130, n131 )
n131 = xor( add2_i[12], add1_i[12] )
result_o[11] = xor( n135, n136 )
n136 = xor( add2_i[11], add1_i[11] )
result_o[10] = xor( n140, n141 )
n141 = xor( add2_i[10], add1_i[10] )
result_o[7] = nand( n27, n26 )
n28 = nand( n145, n146 )
n145 = nand( add2_i[8], add1_i[8] )
n146 = nand( add1_i[7], n147, add2_i[7] )
n147 = or( add2_i[8], add1_i[8] )
n140 = nand( n142, n143 )
n142 = nand( add1_i[9], n28 )
n143 = nand( add2_i[9], n144 )
n144 = or( n28, add1_i[9] )
n135 = nand( n137, n138 )
n137 = nand( add1_i[10], n140 )
n138 = nand( add2_i[10], n139 )
n139 = or( n140, add1_i[10] )
n130 = nand( n132, n133 )
n132 = nand( add1_i[11], n135 )
n133 = nand( add2_i[11], n134 )
n134 = or( n135, add1_i[11] )
n125 = nand( n127, n128 )
n127 = nand( add1_i[12], n130 )
n128 = nand( add2_i[12], n129 )
n129 = or( n130, add1_i[12] )
n120 = nand( n122, n123 )
n122 = nand( add1_i[13], n125 )
n123 = nand( add2_i[13], n124 )
n124 = or( n125, add1_i[13] )
n115 = nand( n117, n118 )
n117 = nand( add1_i[14], n120 )
n118 = nand( add2_i[14], n119 )
n119 = or( n120, add1_i[14] )
n110 = nand( n112, n113 )
n112 = nand( add1_i[15], n115 )
n113 = nand( add2_i[15], n114 )
n114 = or( n115, add1_i[15] )
n105 = nand( n107, n108 )
n107 = nand( add1_i[16], n110 )
n108 = nand( add2_i[16], n109 )
n109 = or( n110, add1_i[16] )
n100 = nand( n102, n103 )
n102 = nand( add1_i[17], n105 )
n103 = nand( add2_i[17], n104 )
n104 = or( n105, add1_i[17] )
n95 = nand( n97, n98 )
n97 = nand( add1_i[18], n100 )
n98 = nand( add2_i[18], n99 )
n99 = or( n100, add1_i[18] )
n90 = nand( n92, n93 )
n92 = nand( add1_i[19], n95 )
n93 = nand( add2_i[19], n94 )
n94 = or( n95, add1_i[19] )
n85 = nand( n87, n88 )
n87 = nand( add1_i[20], n90 )
n88 = nand( add2_i[20], n89 )
n89 = or( n90, add1_i[20] )
n80 = nand( n82, n83 )
n82 = nand( add1_i[21], n85 )
n83 = nand( add2_i[21], n84 )
n84 = or( n85, add1_i[21] )
n75 = nand( n77, n78 )
n77 = nand( add1_i[22], n80 )
n78 = nand( add2_i[22], n79 )
n79 = or( n80, add1_i[22] )
n70 = nand( n72, n73 )
n72 = nand( add1_i[23], n75 )
n73 = nand( add2_i[23], n74 )
n74 = or( n75, add1_i[23] )
n65 = nand( n67, n68 )
n67 = nand( add1_i[24], n70 )
n68 = nand( add2_i[24], n69 )
n69 = or( n70, add1_i[24] )
n60 = nand( n62, n63 )
n62 = nand( add1_i[25], n65 )
n63 = nand( add2_i[25], n64 )
n64 = or( n65, add1_i[25] )
n55 = nand( n57, n58 )
n57 = nand( add1_i[26], n60 )
n58 = nand( add2_i[26], n59 )
n59 = or( n60, add1_i[26] )
n50 = nand( n52, n53 )
n52 = nand( add1_i[27], n55 )
n53 = nand( add2_i[27], n54 )
n54 = or( n55, add1_i[27] )
n45 = nand( n47, n48 )
n47 = nand( add1_i[28], n50 )
n48 = nand( add2_i[28], n49 )
n49 = or( n50, add1_i[28] )
n40 = nand( n42, n43 )
n42 = nand( add1_i[29], n45 )
n43 = nand( add2_i[29], n44 )
n44 = or( n45, add1_i[29] )
n35 = nand( n37, n38 )
n37 = nand( add1_i[30], n40 )
n38 = nand( add2_i[30], n39 )
n39 = or( n40, add1_i[30] )
result_o[32] = nand( n32, n33 )
n32 = nand( add1_i[31], n35 )
n33 = nand( add2_i[31], n34 )
n34 = or( n35, add1_i[31] )
n30 = nor( n26, n27 )
n26 = not( add1_i[7] )
n27 = not( add2_i[7] )
result_o[0] = or( add1_i[0], add2_i[0] )
result_o[1] = or( add1_i[1], add2_i[1] )
result_o[2] = or( add1_i[2], add2_i[2] )
result_o[3] = or( add1_i[3], add2_i[3] )
result_o[4] = or( add1_i[4], add2_i[4] )
result_o[5] = or( add1_i[5], add2_i[5] )
result_o[6] = or( add1_i[6], add2_i[6] )
