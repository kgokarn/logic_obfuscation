# BENCH FILE 
# circuit:lower_part_or_ripple_carry_adder16_netlist.v

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( add2_i[9], n36 )
result_o[8] = xor( add2_i[8], n37 )
result_o[7] = xor( add2_i[7], n38 )
result_o[6] = xor( add2_i[6], n39 )
result_o[5] = xor( add2_i[5], n40 )
result_o[4] = xor( add2_i[4], n41 )
result_o[15] = xor( add2_i[15], n44 )
n44 = xor( n45, add1_i[15] )
result_o[14] = xor( add2_i[14], n48 )
n48 = xor( n49, add1_i[14] )
result_o[13] = xor( add2_i[13], n52 )
n52 = xor( n53, add1_i[13] )
result_o[12] = xor( add2_i[12], n56 )
n56 = xor( n57, add1_i[12] )
result_o[11] = xor( add2_i[11], n60 )
n60 = xor( n61, add1_i[11] )
result_o[10] = xor( add2_i[10], n64 )
n64 = xor( n65, add1_i[10] )
n36 = xor( n68, add1_i[9] )
n37 = xor( n71, add1_i[8] )
n38 = xor( n74, add1_i[7] )
n39 = xor( n77, add1_i[6] )
n40 = xor( n80, add1_i[5] )
n41 = xnor( n83, add1_i[4] )
n83 = nand( add2_i[3], add1_i[3] )
n77 = nand( n78, n79 )
n78 = nand( add1_i[5], n80 )
n79 = nand( add2_i[5], n40 )
n74 = nand( n75, n76 )
n75 = nand( add1_i[6], n77 )
n76 = nand( add2_i[6], n39 )
n53 = nand( n54, n55 )
n54 = nand( add1_i[12], n57 )
n55 = nand( add2_i[12], n56 )
n49 = nand( n50, n51 )
n50 = nand( add1_i[13], n53 )
n51 = nand( add2_i[13], n52 )
n45 = nand( n46, n47 )
n46 = nand( add1_i[14], n49 )
n47 = nand( add2_i[14], n48 )
n80 = nand( n81, n82 )
n82 = nand( add1_i[4], add1_i[3], add2_i[3] )
n81 = nand( add2_i[4], n41 )
n71 = nand( n72, n73 )
n72 = nand( add1_i[7], n74 )
n73 = nand( add2_i[7], n38 )
n68 = nand( n69, n70 )
n69 = nand( add1_i[8], n71 )
n70 = nand( add2_i[8], n37 )
n65 = nand( n66, n67 )
n66 = nand( add1_i[9], n68 )
n67 = nand( add2_i[9], n36 )
n61 = nand( n62, n63 )
n62 = nand( add1_i[10], n65 )
n63 = nand( add2_i[10], n64 )
n57 = nand( n58, n59 )
n58 = nand( add1_i[11], n61 )
n59 = nand( add2_i[11], n60 )
result_o[16] = nand( n42, n43 )
n42 = nand( add1_i[15], n45 )
n43 = nand( add2_i[15], n44 )
result_o[0] = or( add1_i[0], add2_i[0] )
result_o[1] = or( add1_i[1], add2_i[1] )
result_o[2] = or( add1_i[2], add2_i[2] )
result_o[3] = or( add2_i[3], add1_i[3] )
