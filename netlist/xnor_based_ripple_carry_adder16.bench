# BENCH FILE 
# circuit:xnor_based_ripple_carry_adder16_netlist.v

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( add2_i[9], n51 )
result_o[8] = xor( add2_i[8], n52 )
result_o[7] = xor( add2_i[7], n53 )
result_o[6] = xor( add2_i[6], n54 )
result_o[5] = xor( n55, add2_i[5] )
result_o[4] = xor( n56, add2_i[4] )
result_o[15] = xor( add2_i[15], n65 )
n65 = xor( n66, add1_i[15] )
result_o[14] = xor( add2_i[14], n69 )
n69 = xor( n70, add1_i[14] )
result_o[13] = xor( add2_i[13], n73 )
n73 = xor( n74, add1_i[13] )
result_o[12] = xor( add2_i[12], n77 )
n77 = xor( n78, add1_i[12] )
result_o[11] = xor( add2_i[11], n81 )
n81 = xor( n82, add1_i[11] )
result_o[10] = xor( add2_i[10], n85 )
n85 = xor( n86, add1_i[10] )
n51 = xor( n89, add1_i[9] )
n52 = xor( n92, add1_i[8] )
n53 = xor( n95, add1_i[7] )
n54 = xor( n98, add1_i[6] )
n55 = xor( n101, add1_i[5] )
n56 = xor( n104, add1_i[4] )
n62 = xor( add1_i[1], add2_i[1] )
n59 = xor( add1_i[2], add2_i[2] )
n57 = xor( add1_i[3], add2_i[3] )
result_o[1] = nor( n61, n62 )
result_o[3] = nor( n47, n57 )
n47 = not( n58 )
result_o[2] = nor( n48, n59 )
n48 = not( n60 )
n61 = nor( n50, add1_i[0] )
n50 = not( result_o[0] )
result_o[0] = xnor( add1_i[0], add2_i[0] )
n104 = nand( n105, n106 )
n105 = nand( add1_i[3], add2_i[3] )
n106 = nand( n57, n58 )
n60 = nand( n109, n110 )
n109 = nand( add1_i[1], add2_i[1] )
n110 = nand( n62, n49 )
n49 = not( n61 )
n58 = nand( n107, n108 )
n107 = nand( add1_i[2], add2_i[2] )
n108 = nand( n59, n60 )
n82 = nand( n83, n84 )
n83 = nand( add1_i[10], n86 )
n84 = nand( add2_i[10], n85 )
n78 = nand( n79, n80 )
n79 = nand( add1_i[11], n82 )
n80 = nand( add2_i[11], n81 )
n74 = nand( n75, n76 )
n75 = nand( add1_i[12], n78 )
n76 = nand( add2_i[12], n77 )
n70 = nand( n71, n72 )
n71 = nand( add1_i[13], n74 )
n72 = nand( add2_i[13], n73 )
n66 = nand( n67, n68 )
n67 = nand( add1_i[14], n70 )
n68 = nand( add2_i[14], n69 )
n98 = nand( n99, n100 )
n99 = nand( add1_i[5], n101 )
n100 = nand( add2_i[5], n55 )
n95 = nand( n96, n97 )
n96 = nand( add1_i[6], n98 )
n97 = nand( add2_i[6], n54 )
n92 = nand( n93, n94 )
n93 = nand( add1_i[7], n95 )
n94 = nand( add2_i[7], n53 )
n89 = nand( n90, n91 )
n90 = nand( add1_i[8], n92 )
n91 = nand( add2_i[8], n52 )
n86 = nand( n87, n88 )
n87 = nand( add1_i[9], n89 )
n88 = nand( add2_i[9], n51 )
n101 = nand( n102, n103 )
n102 = nand( add1_i[4], n104 )
n103 = nand( add2_i[4], n56 )
result_o[16] = nand( n63, n64 )
n63 = nand( add1_i[15], n66 )
n64 = nand( add2_i[15], n65 )
