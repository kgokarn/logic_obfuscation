# BENCH FILE 
# circuit:lower_part_or_carry_lookahead_adder16_netlist.v

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( n16, n17 )
n17 = xor( add2_i[9], add1_i[9] )
result_o[8] = xor( n18, n19 )
n19 = xor( add2_i[8], add1_i[8] )
result_o[7] = xor( n20, n21 )
n21 = xor( add2_i[7], add1_i[7] )
result_o[6] = xor( n22, n23 )
n23 = xor( add2_i[6], add1_i[6] )
result_o[5] = xor( n24, n25 )
n25 = xor( add2_i[5], add1_i[5] )
result_o[4] = xor( n26, n27 )
n27 = xor( add2_i[4], add1_i[4] )
result_o[15] = xor( n31, n32 )
n32 = xor( add2_i[15], add1_i[15] )
result_o[14] = xor( n36, n37 )
n37 = xor( add2_i[14], add1_i[14] )
result_o[13] = xor( n41, n42 )
n42 = xor( add2_i[13], add1_i[13] )
result_o[12] = xor( n46, n47 )
n47 = xor( add2_i[12], add1_i[12] )
result_o[11] = xor( n51, n52 )
n52 = xor( add2_i[11], add1_i[11] )
result_o[10] = xor( n56, n57 )
n57 = xor( add2_i[10], add1_i[10] )
result_o[3] = nand( n15, n14 )
n24 = nand( n73, n74 )
n73 = nand( add2_i[4], add1_i[4] )
n74 = nand( add1_i[3], n75, add2_i[3] )
n75 = or( add2_i[4], add1_i[4] )
n22 = nand( n70, n71 )
n70 = nand( add1_i[5], n24 )
n71 = nand( add2_i[5], n72 )
n72 = or( n24, add1_i[5] )
n20 = nand( n67, n68 )
n67 = nand( add1_i[6], n22 )
n68 = nand( add2_i[6], n69 )
n69 = or( n22, add1_i[6] )
n18 = nand( n64, n65 )
n64 = nand( add1_i[7], n20 )
n65 = nand( add2_i[7], n66 )
n66 = or( n20, add1_i[7] )
n16 = nand( n61, n62 )
n61 = nand( add1_i[8], n18 )
n62 = nand( add2_i[8], n63 )
n63 = or( n18, add1_i[8] )
n56 = nand( n58, n59 )
n58 = nand( add1_i[9], n16 )
n59 = nand( add2_i[9], n60 )
n60 = or( n16, add1_i[9] )
n51 = nand( n53, n54 )
n53 = nand( add1_i[10], n56 )
n54 = nand( add2_i[10], n55 )
n55 = or( n56, add1_i[10] )
n46 = nand( n48, n49 )
n48 = nand( add1_i[11], n51 )
n49 = nand( add2_i[11], n50 )
n50 = or( n51, add1_i[11] )
n41 = nand( n43, n44 )
n43 = nand( add1_i[12], n46 )
n44 = nand( add2_i[12], n45 )
n45 = or( n46, add1_i[12] )
n36 = nand( n38, n39 )
n38 = nand( add1_i[13], n41 )
n39 = nand( add2_i[13], n40 )
n40 = or( n41, add1_i[13] )
n31 = nand( n33, n34 )
n33 = nand( add1_i[14], n36 )
n34 = nand( add2_i[14], n35 )
n35 = or( n36, add1_i[14] )
result_o[16] = nand( n28, n29 )
n28 = nand( add1_i[15], n31 )
n29 = nand( add2_i[15], n30 )
n30 = or( n31, add1_i[15] )
n26 = nor( n14, n15 )
n14 = not( add1_i[3] )
n15 = not( add2_i[3] )
result_o[0] = or( add1_i[0], add2_i[0] )
result_o[1] = or( add1_i[1], add2_i[1] )
result_o[2] = or( add1_i[2], add2_i[2] )
