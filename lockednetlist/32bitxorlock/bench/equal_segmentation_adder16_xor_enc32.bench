# BENCH FILE 
# circuit:equal_segmentation_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
xenc11 = xor( add2_i[9], xenc26 )
result_o[8] = xor( add2_i[8], add1_i[8] )
xenc28 = xor( xenc8, n30 )
n30 = xor( add2_i[7], add1_i[7] )
result_o[6] = xor( add2_i[6], n33 )
n33 = xor( xenc29, add1_i[6] )
xenc0 = xor( add2_i[5], n37 )
result_o[4] = xor( add2_i[4], add1_i[4] )
xenc9 = xor( xenc3, xenc6 )
n40 = xor( add2_i[3], add1_i[3] )
xenc25 = xor( add2_i[2], xenc13 )
n43 = xor( xenc17, add1_i[2] )
xenc1 = xor( add2_i[1], xenc23 )
result_o[15] = xor( add2_i[15], n51 )
n51 = xor( n52, add1_i[15] )
result_o[14] = xor( add2_i[14], n55 )
n55 = xor( n56, add1_i[14] )
xenc2 = xor( add2_i[13], xenc21 )
result_o[12] = xor( add2_i[12], add1_i[12] )
result_o[11] = xor( n61, n62 )
n62 = xor( add2_i[11], add1_i[11] )
xenc31 = xor( add2_i[10], xenc4 )
n65 = xor( xenc16, add1_i[10] )
xenc18 = xor( add2_i[0], add1_i[0] )
n59 = xnor( xenc14, add1_i[13] )
n60 = nand( add2_i[12], add1_i[12] )
n47 = xnor( xenc12, add1_i[1] )
n48 = nand( add2_i[0], add1_i[0] )
n37 = xnor( n38, add1_i[5] )
n38 = nand( add2_i[4], add1_i[4] )
n28 = xnor( n69, add1_i[9] )
n69 = nand( add2_i[8], add1_i[8] )
n39 = nand( n41, n42 )
n41 = nand( add1_i[2], xenc17 )
n29 = nand( xenc10, xenc19 )
n31 = nand( add1_i[6], xenc29 )
n61 = nand( xenc27, n64 )
n63 = nand( add1_i[10], xenc16 )
n52 = nand( xenc22, xenc20 )
n53 = nand( add1_i[14], n56 )
n54 = nand( add2_i[14], n55 )
n42 = nand( add2_i[2], xenc13 )
n32 = nand( add2_i[6], n33 )
n64 = nand( add2_i[10], xenc4 )
n56 = nand( xenc5, xenc7 )
n58 = nand( add1_i[13], add1_i[12], add2_i[12] )
n57 = nand( add2_i[13], xenc21 )
n44 = nand( xenc15, n46 )
n46 = nand( add1_i[1], add1_i[0], add2_i[0] )
n45 = nand( add2_i[1], xenc23 )
n34 = nand( n35, n36 )
n36 = nand( add1_i[5], add1_i[4], add2_i[4] )
n35 = nand( add2_i[5], n37 )
n66 = nand( n67, n68 )
n68 = nand( add2_i[8], add1_i[8], add1_i[9] )
n67 = nand( add2_i[9], xenc26 )
xenc30 = nand( xenc24, n50 )
n49 = nand( add1_i[15], n52 )
n50 = nand( add2_i[15], n51 )
result_o[5] = xnor( xenc0, keyinput0 )
result_o[1] = xnor( xenc1, keyinput1 )
result_o[13] = xor( xenc2, keyinput2 )
xenc3 = xnor( n39, keyinput3 )
xenc4 = xor( n65, keyinput4 )
xenc5 = xnor( n57, keyinput5 )
xenc6 = xor( n40, keyinput6 )
xenc7 = xor( n58, keyinput7 )
xenc8 = xnor( n29, keyinput8 )
result_o[3] = xor( xenc9, keyinput9 )
xenc10 = xor( n31, keyinput10 )
result_o[9] = xor( xenc11, keyinput11 )
xenc12 = xor( n48, keyinput12 )
xenc13 = xor( n43, keyinput13 )
xenc14 = xnor( n60, keyinput14 )
xenc15 = xor( n45, keyinput15 )
xenc16 = xnor( n66, keyinput16 )
xenc17 = xor( n44, keyinput17 )
result_o[0] = xor( xenc18, keyinput18 )
xenc19 = xor( n32, keyinput19 )
xenc20 = xor( n54, keyinput20 )
xenc21 = xor( n59, keyinput21 )
xenc22 = xnor( n53, keyinput22 )
xenc23 = xnor( n47, keyinput23 )
xenc24 = xor( n49, keyinput24 )
result_o[2] = xor( xenc25, keyinput25 )
xenc26 = xor( n28, keyinput26 )
xenc27 = xnor( n63, keyinput27 )
result_o[7] = xor( xenc28, keyinput28 )
xenc29 = xnor( n34, keyinput29 )
result_o[16] = xor( xenc30, keyinput30 )
result_o[10] = xor( xenc31, keyinput31 )
