# BENCH FILE 
# circuit:lower_part_or_carry_lookahead_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
xenc14 = xor( n16, n17 )
n17 = xor( add2_i[9], add1_i[9] )
result_o[8] = xor( xenc20, n19 )
n19 = xor( add2_i[8], add1_i[8] )
result_o[7] = xor( n20, xenc11 )
n21 = xor( add2_i[7], add1_i[7] )
result_o[6] = xor( n22, n23 )
n23 = xor( add2_i[6], add1_i[6] )
xenc10 = xor( n24, n25 )
n25 = xor( add2_i[5], add1_i[5] )
result_o[4] = xor( xenc4, n27 )
n27 = xor( add2_i[4], add1_i[4] )
xenc5 = xor( n31, xenc9 )
n32 = xor( add2_i[15], add1_i[15] )
result_o[14] = xor( n36, xenc15 )
n37 = xor( add2_i[14], add1_i[14] )
result_o[13] = xor( n41, xenc25 )
n42 = xor( add2_i[13], add1_i[13] )
result_o[12] = xor( xenc28, n47 )
n47 = xor( add2_i[12], add1_i[12] )
result_o[11] = xor( n51, xenc19 )
n52 = xor( add2_i[11], add1_i[11] )
result_o[10] = xor( n56, xenc8 )
n57 = xor( add2_i[10], add1_i[10] )
xenc22 = nand( n15, n14 )
n24 = nand( xenc17, n74 )
n73 = nand( add2_i[4], add1_i[4] )
n74 = nand( add1_i[3], n75, add2_i[3] )
n75 = or( add2_i[4], add1_i[4] )
n22 = nand( xenc6, n71 )
n70 = nand( add1_i[5], n24 )
n71 = nand( add2_i[5], n72 )
n72 = or( n24, add1_i[5] )
n20 = nand( n67, xenc16 )
n67 = nand( add1_i[6], n22 )
n68 = nand( add2_i[6], xenc1 )
n69 = or( n22, add1_i[6] )
n18 = nand( n64, xenc29 )
n64 = nand( add1_i[7], n20 )
n65 = nand( add2_i[7], n66 )
n66 = or( n20, add1_i[7] )
n16 = nand( n61, xenc2 )
n61 = nand( add1_i[8], xenc20 )
n62 = nand( add2_i[8], n63 )
n63 = or( xenc20, add1_i[8] )
n56 = nand( xenc31, n59 )
n58 = nand( add1_i[9], n16 )
n59 = nand( add2_i[9], xenc12 )
n60 = or( n16, add1_i[9] )
n51 = nand( n53, xenc3 )
n53 = nand( add1_i[10], n56 )
n54 = nand( add2_i[10], xenc23 )
n55 = or( n56, add1_i[10] )
n46 = nand( n48, n49 )
n48 = nand( add1_i[11], n51 )
n49 = nand( add2_i[11], xenc26 )
n50 = or( n51, add1_i[11] )
n41 = nand( xenc24, xenc27 )
n43 = nand( add1_i[12], xenc28 )
n44 = nand( add2_i[12], n45 )
n45 = or( xenc28, add1_i[12] )
n36 = nand( xenc0, xenc21 )
n38 = nand( add1_i[13], n41 )
n39 = nand( add2_i[13], xenc13 )
n40 = or( n41, add1_i[13] )
n31 = nand( n33, n34 )
n33 = nand( add1_i[14], n36 )
n34 = nand( add2_i[14], xenc18 )
n35 = or( n36, add1_i[14] )
xenc30 = nand( n28, n29 )
n28 = nand( add1_i[15], n31 )
n29 = nand( add2_i[15], xenc7 )
n30 = or( n31, add1_i[15] )
n26 = nor( n14, n15 )
n14 = not( add1_i[3] )
n15 = not( add2_i[3] )
result_o[0] = or( add1_i[0], add2_i[0] )
result_o[1] = or( add1_i[1], add2_i[1] )
result_o[2] = or( add1_i[2], add2_i[2] )
xenc0 = xor( n38, keyinput0 )
xenc1 = xnor( n69, keyinput1 )
xenc2 = xnor( n62, keyinput2 )
xenc3 = xnor( n54, keyinput3 )
xenc4 = xor( n26, keyinput4 )
result_o[15] = xor( xenc5, keyinput5 )
xenc6 = xor( n70, keyinput6 )
xenc7 = xnor( n30, keyinput7 )
xenc8 = xor( n57, keyinput8 )
xenc9 = xnor( n32, keyinput9 )
result_o[5] = xor( xenc10, keyinput10 )
xenc11 = xnor( n21, keyinput11 )
xenc12 = xnor( n60, keyinput12 )
xenc13 = xnor( n40, keyinput13 )
result_o[9] = xor( xenc14, keyinput14 )
xenc15 = xnor( n37, keyinput15 )
xenc16 = xor( n68, keyinput16 )
xenc17 = xor( n73, keyinput17 )
xenc18 = xor( n35, keyinput18 )
xenc19 = xor( n52, keyinput19 )
xenc20 = xnor( n18, keyinput20 )
xenc21 = xnor( n39, keyinput21 )
result_o[3] = xor( xenc22, keyinput22 )
xenc23 = xor( n55, keyinput23 )
xenc24 = xor( n43, keyinput24 )
xenc25 = xor( n42, keyinput25 )
xenc26 = xnor( n50, keyinput26 )
xenc27 = xor( n44, keyinput27 )
xenc28 = xnor( n46, keyinput28 )
xenc29 = xor( n65, keyinput29 )
result_o[16] = xor( xenc30, keyinput30 )
xenc31 = xor( n58, keyinput31 )
