# BENCH FILE 
# circuit:error_tolerant_type2_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput1)
INPUT(keyinput0)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
INPUT(keyinput40)
INPUT(keyinput41)
INPUT(keyinput42)
INPUT(keyinput43)
INPUT(keyinput44)
INPUT(keyinput45)
INPUT(keyinput46)
INPUT(keyinput47)
INPUT(keyinput48)
INPUT(keyinput49)
INPUT(keyinput50)
INPUT(keyinput51)
INPUT(keyinput52)
INPUT(keyinput53)
INPUT(keyinput54)
INPUT(keyinput55)
INPUT(keyinput56)
INPUT(keyinput57)
INPUT(keyinput58)
INPUT(keyinput59)
INPUT(keyinput60)
INPUT(keyinput61)
INPUT(keyinput62)
INPUT(keyinput63)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( n67, add2_i[9] )
result_o[8] = xor( n68, add2_i[8] )
result_o[7] = xor( n69, n70 )
n70 = xor( add2_i[7], add1_i[7] )
result_o[6] = xor( add2_i[6], n73 )
n73 = xor( n74, add1_i[6] )
result_o[5] = xor( add2_i[5], n77 )
n77 = xor( n78, add1_i[5] )
result_o[4] = xor( n81, add2_i[4] )
n81 = xor( n82, add1_i[4] )
result_o[3] = xor( n95, n96 )
n96 = xor( add2_i[3], add1_i[3] )
result_o[2] = xor( add2_i[2], n99 )
n99 = xor( n100, add1_i[2] )
result_o[1] = xor( n104, add2_i[1] )
n104 = xor( n103, add1_i[1] )
result_o[15] = xor( n116, n117 )
n117 = xor( add2_i[15], add1_i[15] )
result_o[14] = xor( add2_i[14], n120 )
n120 = xor( n121, add1_i[14] )
result_o[13] = xor( n124, add2_i[13] )
n124 = xor( n125, add1_i[13] )
result_o[12] = xor( n128, add2_i[12] )
n128 = xor( n129, add1_i[12] )
result_o[11] = xor( n141, n142 )
n142 = xor( add2_i[11], add1_i[11] )
result_o[10] = xor( add2_i[10], n145 )
n145 = xor( n146, add1_i[10] )
n67 = xor( n149, add1_i[9] )
n68 = xor( n152, add1_i[8] )
n66 = not( n94 )
result_o[0] = nand( n94, n103 )
n69 = nand( n71_ant0, n72 )
n71 = nand( add1_i[6], n74 )
n74 = nand( n75, n76 )
n75 = nand( add1_i[5], n78 )
n76 = nand( n77, add2_i[5] )
n144 = nand( n145, add2_i[10] )
n72 = nand( n73, add2_i[6] )
n119 = nand( n120, add2_i[14] )
n78 = nand( n79, n80 )
n79 = nand( add1_i[4], n82 )
n80 = nand( n81, add2_i[4] )
n94 = nand( add2_i[0], add1_i[0] )
n125 = nand( n126, n127 )
n126 = nand( add1_i[12], n129 )
n127 = nand( n128, add2_i[12] )
n121 = nand( n122, n123 )
n122 = nand( add1_i[13], n125 )
n123 = nand( n124, add2_i[13] )
n149 = nand( n150, n151 )
n150 = nand( add1_i[8], n152 )
n151 = nand( add2_i[8], n68 )
n146 = nand( n147, n148 )
n147 = nand( add1_i[9], n149 )
n148 = nand( add2_i[9], n67 )
n82 = nand( n83, n84 )
n83 = nand( add1_i[3], n86 )
n84 = nand( add2_i[3], n85 )
n85 = or( n86, add1_i[3] )
n152 = nand( n153, n154 )
n153 = nand( add1_i[7], n156 )
n154 = nand( add2_i[7], n155 )
n155 = or( n156, add1_i[7] )
n129 = nand( n130, n131 )
n130 = nand( add1_i[11], n133 )
n131 = nand( add2_i[11], n132 )
n132 = or( n133, add1_i[11] )
n160 = nand( n161, n162 )
n161 = nand( add2_i[5], add1_i[5] )
n162 = nand( add1_i[4], n163, add2_i[4] )
n163 = or( add2_i[5], add1_i[5] )
n137 = nand( n138, n139 )
n138 = nand( add2_i[9], add1_i[9] )
n139 = nand( add1_i[8], n140, add2_i[8] )
n140 = or( add2_i[9], add1_i[9] )
n86 = nand( n87, n88 )
n87 = nand( add1_i[2], n90 )
n88 = nand( add2_i[2], n89 )
n89 = or( n90, add1_i[2] )
n156 = nand( n157, n158 )
n157 = nand( add1_i[6], n160 )
n158 = nand( add2_i[6], n159 )
n159 = or( n160, add1_i[6] )
n133 = nand( n134, n135 )
n134 = nand( add1_i[10], n137 )
n135 = nand( add2_i[10], n136 )
n136 = or( n137, add1_i[10] )
n141 = nand( n143, n144 )
n143 = nand( add1_i[10], n146 )
n116 = nand( n118, n119 )
n118 = nand( add1_i[14], n121 )
n90 = nand( n91, n92 )
n91 = nand( add1_i[1], n66 )
n92 = nand( add2_i[1], n93 )
n93 = or( add1_i[1], n66 )
n103 = or( add2_i[0], add1_i[0] )
n95 = nand( n97, n98 )
n97 = nand( add1_i[2], n100 )
n98 = nand( n99, add2_i[2] )
n100 = nand( n101, n102 )
n102 = nand( add1_i[1], n103 )
n101 = nand( n104, add2_i[1] )
n112 = nand( n113, n114 )
n113 = nand( add2_i[13], add1_i[13] )
n114 = nand( add1_i[12], n115, add2_i[12] )
n115 = or( add2_i[13], add1_i[13] )
n108 = nand( n109, n110 )
n109 = nand( add1_i[14], n112 )
n110 = nand( add2_i[14], n111 )
n111 = or( n112, add1_i[14] )
result_o[16] = nand( n105, n106 )
n105 = nand( add1_i[15], n108 )
n106 = nand( add2_i[15], n107 )
n107 = or( n108, add1_i[15] )
n71_ant0 = xor( n71, antisat_out )
inter30_0 = and( in0xor_0, in1xor_0 )
inter29_0 = and( in2xor_0, in3xor_0 )
inter28_0 = and( in4xor_0, in5xor_0 )
inter27_0 = and( in6xor_0, in7xor_0 )
inter26_0 = and( in8xor_0, in9xor_0 )
inter25_0 = and( in10xor_0, in11xor_0 )
inter24_0 = and( in12xor_0, in13xor_0 )
inter23_0 = and( in14xor_0, in15xor_0 )
inter22_0 = and( in16xor_0, in17xor_0 )
inter21_0 = and( in18xor_0, in19xor_0 )
inter20_0 = and( in20xor_0, in21xor_0 )
inter19_0 = and( in22xor_0, in23xor_0 )
inter18_0 = and( in24xor_0, in25xor_0 )
inter17_0 = and( in26xor_0, in27xor_0 )
inter16_0 = and( in28xor_0, in29xor_0 )
inter15_0 = and( in30xor_0, in31xor_0 )
inter14_0 = and( inter30_0, inter29_0 )
inter13_0 = and( inter28_0, inter27_0 )
inter12_0 = and( inter26_0, inter25_0 )
inter11_0 = and( inter24_0, inter23_0 )
inter10_0 = and( inter22_0, inter21_0 )
inter9_0 = and( inter20_0, inter19_0 )
inter8_0 = and( inter18_0, inter17_0 )
inter7_0 = and( inter16_0, inter15_0 )
inter6_0 = and( inter14_0, inter13_0 )
inter5_0 = and( inter12_0, inter11_0 )
inter4_0 = and( inter10_0, inter9_0 )
inter3_0 = and( inter8_0, inter7_0 )
inter2_0 = and( inter6_0, inter5_0 )
inter1_0 = and( inter4_0, inter3_0 )
antisat_g_0 = and( inter2_0, inter1_0 )
in0xor_0 = xor( n85, keyinput0 )
in1xor_0 = xor( n74, keyinput1 )
in2xor_0 = xor( n88, keyinput2 )
in3xor_0 = xor( n89, keyinput3 )
in4xor_0 = xor( n76, keyinput4 )
in5xor_0 = xor( n81, keyinput5 )
in6xor_0 = xor( n94, keyinput6 )
in7xor_0 = xor( n87, keyinput7 )
in8xor_0 = xor( n86, keyinput8 )
in9xor_0 = xor( add1_i[0], keyinput9 )
in10xor_0 = xor( n80, keyinput10 )
in11xor_0 = xor( add2_i[1], keyinput11 )
in12xor_0 = xor( n66, keyinput12 )
in13xor_0 = xor( n91, keyinput13 )
in14xor_0 = xor( add1_i[1], keyinput14 )
in15xor_0 = xor( add2_i[2], keyinput15 )
in16xor_0 = xor( add1_i[2], keyinput16 )
in17xor_0 = xor( add2_i[3], keyinput17 )
in18xor_0 = xor( n79, keyinput18 )
in19xor_0 = xor( add2_i[0], keyinput19 )
in20xor_0 = xor( n82, keyinput20 )
in21xor_0 = xor( n93, keyinput21 )
in22xor_0 = xor( add1_i[3], keyinput22 )
in23xor_0 = xor( add2_i[4], keyinput23 )
in24xor_0 = xor( add1_i[4], keyinput24 )
in25xor_0 = xor( add2_i[5], keyinput25 )
in26xor_0 = xor( n83, keyinput26 )
in27xor_0 = xor( add1_i[5], keyinput27 )
in28xor_0 = xor( n77, keyinput28 )
in29xor_0 = xor( n84, keyinput29 )
in30xor_0 = xor( add1_i[6], keyinput30 )
in31xor_0 = xor( n75, keyinput31 )
inter30_b_0 = and( in0xor_b_0, in1xor_b_0 )
inter29_b_0 = and( in2xor_b_0, in3xor_b_0 )
inter28_b_0 = and( in4xor_b_0, in5xor_b_0 )
inter27_b_0 = and( in6xor_b_0, in7xor_b_0 )
inter26_b_0 = and( in8xor_b_0, in9xor_b_0 )
inter25_b_0 = and( in10xor_b_0, in11xor_b_0 )
inter24_b_0 = and( in12xor_b_0, in13xor_b_0 )
inter23_b_0 = and( in14xor_b_0, in15xor_b_0 )
inter22_b_0 = and( in16xor_b_0, in17xor_b_0 )
inter21_b_0 = and( in18xor_b_0, in19xor_b_0 )
inter20_b_0 = and( in20xor_b_0, in21xor_b_0 )
inter19_b_0 = and( in22xor_b_0, in23xor_b_0 )
inter18_b_0 = and( in24xor_b_0, in25xor_b_0 )
inter17_b_0 = and( in26xor_b_0, in27xor_b_0 )
inter16_b_0 = and( in28xor_b_0, in29xor_b_0 )
inter15_b_0 = and( in30xor_b_0, in31xor_b_0 )
inter14_b_0 = and( inter30_b_0, inter29_b_0 )
inter13_b_0 = and( inter28_b_0, inter27_b_0 )
inter12_b_0 = and( inter26_b_0, inter25_b_0 )
inter11_b_0 = and( inter24_b_0, inter23_b_0 )
inter10_b_0 = and( inter22_b_0, inter21_b_0 )
inter9_b_0 = and( inter20_b_0, inter19_b_0 )
inter8_b_0 = and( inter18_b_0, inter17_b_0 )
inter7_b_0 = and( inter16_b_0, inter15_b_0 )
inter6_b_0 = and( inter14_b_0, inter13_b_0 )
inter5_b_0 = and( inter12_b_0, inter11_b_0 )
inter4_b_0 = and( inter10_b_0, inter9_b_0 )
inter3_b_0 = and( inter8_b_0, inter7_b_0 )
inter2_b_0 = and( inter6_b_0, inter5_b_0 )
inter1_b_0 = and( inter4_b_0, inter3_b_0 )
inter0_b_0 = and( inter2_b_0, inter1_b_0 )
in0xor_b_0 = xor( n85, keyinput32 )
in1xor_b_0 = xor( n74, keyinput33 )
in2xor_b_0 = xor( n88, keyinput34 )
in3xor_b_0 = xor( n89, keyinput35 )
in4xor_b_0 = xor( n76, keyinput36 )
in5xor_b_0 = xor( n81, keyinput37 )
in6xor_b_0 = xor( n94, keyinput38 )
in7xor_b_0 = xor( n87, keyinput39 )
in8xor_b_0 = xor( n86, keyinput40 )
in9xor_b_0 = xor( add1_i[0], keyinput41 )
in10xor_b_0 = xor( n80, keyinput42 )
in11xor_b_0 = xor( add2_i[1], keyinput43 )
in12xor_b_0 = xor( n66, keyinput44 )
in13xor_b_0 = xor( n91, keyinput45 )
in14xor_b_0 = xor( add1_i[1], keyinput46 )
in15xor_b_0 = xor( add2_i[2], keyinput47 )
in16xor_b_0 = xor( add1_i[2], keyinput48 )
in17xor_b_0 = xor( add2_i[3], keyinput49 )
in18xor_b_0 = xor( n79, keyinput50 )
in19xor_b_0 = xor( add2_i[0], keyinput51 )
in20xor_b_0 = xor( n82, keyinput52 )
in21xor_b_0 = xor( n93, keyinput53 )
in22xor_b_0 = xor( add1_i[3], keyinput54 )
in23xor_b_0 = xor( add2_i[4], keyinput55 )
in24xor_b_0 = xor( add1_i[4], keyinput56 )
in25xor_b_0 = xor( add2_i[5], keyinput57 )
in26xor_b_0 = xor( n83, keyinput58 )
in27xor_b_0 = xor( add1_i[5], keyinput59 )
in28xor_b_0 = xor( n77, keyinput60 )
in29xor_b_0 = xor( n84, keyinput61 )
in30xor_b_0 = xor( add1_i[6], keyinput62 )
in31xor_b_0 = xor( n75, keyinput63 )
antisat_gbar_0 = not( inter0_b_0 )
antisat_out = and( antisat_g_0, antisat_gbar_0 )
