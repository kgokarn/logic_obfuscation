# BENCH FILE 
# circuit:lower_part_or_carry_lookahead_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput1)
INPUT(keyinput0)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
INPUT(keyinput40)
INPUT(keyinput41)
INPUT(keyinput42)
INPUT(keyinput43)
INPUT(keyinput44)
INPUT(keyinput45)
INPUT(keyinput46)
INPUT(keyinput47)
INPUT(keyinput48)
INPUT(keyinput49)
INPUT(keyinput50)
INPUT(keyinput51)
INPUT(keyinput52)
INPUT(keyinput53)
INPUT(keyinput54)
INPUT(keyinput55)
INPUT(keyinput56)
INPUT(keyinput57)
INPUT(keyinput58)
INPUT(keyinput59)
INPUT(keyinput60)
INPUT(keyinput61)
INPUT(keyinput62)
INPUT(keyinput63)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( n16, n17 )
n17 = xor( add2_i[9], add1_i[9] )
result_o[8] = xor( n18, n19 )
n19 = xor( add2_i[8], add1_i[8] )
result_o[7] = xor( n20, n21 )
n21 = xor( add2_i[7], add1_i[7] )
result_o[6] = xor( n22, n23 )
n23 = xor( add2_i[6], add1_i[6] )
result_o[5] = xor( n24, n25 )
n25 = xor( add2_i[5], add1_i[5] )
result_o[4] = xor( n26, n27 )
n27 = xor( add2_i[4], add1_i[4] )
result_o[15] = xor( n31, n32 )
n32 = xor( add2_i[15], add1_i[15] )
result_o[14] = xor( n36, n37 )
n37 = xor( add2_i[14], add1_i[14] )
result_o[13] = xor( n41, n42 )
n42 = xor( add2_i[13], add1_i[13] )
result_o[12] = xor( n46, n47 )
n47 = xor( add2_i[12], add1_i[12] )
result_o[11] = xor( n51, n52 )
n52 = xor( add2_i[11], add1_i[11] )
result_o[10] = xor( n56, n57 )
n57 = xor( add2_i[10], add1_i[10] )
result_o[3] = nand( n15, n14 )
n24 = nand( n73, n74 )
n73 = nand( add2_i[4], add1_i[4] )
n74 = nand( add1_i[3], n75, add2_i[3] )
n75 = or( add2_i[4], add1_i[4] )
n22 = nand( n70, n71 )
n70 = nand( add1_i[5], n24 )
n71 = nand( add2_i[5], n72 )
n72 = or( n24, add1_i[5] )
n20 = nand( n67, n68 )
n67 = nand( add1_i[6], n22 )
n68 = nand( add2_i[6], n69 )
n69 = or( n22, add1_i[6] )
n18 = nand( n64, n65 )
n64 = nand( add1_i[7], n20 )
n65 = nand( add2_i[7], n66 )
n66 = or( n20, add1_i[7] )
n16 = nand( n61, n62 )
n61 = nand( add1_i[8], n18 )
n62 = nand( add2_i[8], n63 )
n63 = or( n18, add1_i[8] )
n56 = nand( n58, n59 )
n58 = nand( add1_i[9], n16 )
n59 = nand( add2_i[9], n60 )
n60 = or( n16, add1_i[9] )
n51 = nand( n53, n54 )
n53 = nand( add1_i[10], n56 )
n54 = nand( add2_i[10], n55 )
n55 = or( n56, add1_i[10] )
n46 = nand( n48, n49 )
n48 = nand( add1_i[11], n51 )
n49 = nand( add2_i[11], n50 )
n50 = or( n51, add1_i[11] )
n41 = nand( n43_ant0, n44 )
n43 = nand( add1_i[12], n46 )
n44 = nand( add2_i[12], n45 )
n45 = or( n46, add1_i[12] )
n36 = nand( n38, n39 )
n38 = nand( add1_i[13], n41 )
n39 = nand( add2_i[13], n40 )
n40 = or( n41, add1_i[13] )
n31 = nand( n33, n34 )
n33 = nand( add1_i[14], n36 )
n34 = nand( add2_i[14], n35 )
n35 = or( n36, add1_i[14] )
result_o[16] = nand( n28, n29 )
n28 = nand( add1_i[15], n31 )
n29 = nand( add2_i[15], n30 )
n30 = or( n31, add1_i[15] )
n26 = nor( n14, n15 )
n14 = not( add1_i[3] )
n15 = not( add2_i[3] )
result_o[0] = or( add1_i[0], add2_i[0] )
result_o[1] = or( add1_i[1], add2_i[1] )
result_o[2] = or( add1_i[2], add2_i[2] )
n43_ant0 = xor( n43, antisat_out )
inter30_0 = and( in0xor_0, in1xor_0 )
inter29_0 = and( in2xor_0, in3xor_0 )
inter28_0 = and( in4xor_0, in5xor_0 )
inter27_0 = and( in6xor_0, in7xor_0 )
inter26_0 = and( in8xor_0, in9xor_0 )
inter25_0 = and( in10xor_0, in11xor_0 )
inter24_0 = and( in12xor_0, in13xor_0 )
inter23_0 = and( in14xor_0, in15xor_0 )
inter22_0 = and( in16xor_0, in17xor_0 )
inter21_0 = and( in18xor_0, in19xor_0 )
inter20_0 = and( in20xor_0, in21xor_0 )
inter19_0 = and( in22xor_0, in23xor_0 )
inter18_0 = and( in24xor_0, in25xor_0 )
inter17_0 = and( in26xor_0, in27xor_0 )
inter16_0 = and( in28xor_0, in29xor_0 )
inter15_0 = and( in30xor_0, in31xor_0 )
inter14_0 = and( inter30_0, inter29_0 )
inter13_0 = and( inter28_0, inter27_0 )
inter12_0 = and( inter26_0, inter25_0 )
inter11_0 = and( inter24_0, inter23_0 )
inter10_0 = and( inter22_0, inter21_0 )
inter9_0 = and( inter20_0, inter19_0 )
inter8_0 = and( inter18_0, inter17_0 )
inter7_0 = and( inter16_0, inter15_0 )
inter6_0 = and( inter14_0, inter13_0 )
inter5_0 = and( inter12_0, inter11_0 )
inter4_0 = and( inter10_0, inter9_0 )
inter3_0 = and( inter8_0, inter7_0 )
inter2_0 = and( inter6_0, inter5_0 )
inter1_0 = and( inter4_0, inter3_0 )
antisat_g_0 = and( inter2_0, inter1_0 )
in0xor_0 = xor( n51, keyinput0 )
in1xor_0 = xor( n66, keyinput1 )
in2xor_0 = xor( n61, keyinput2 )
in3xor_0 = xor( n70, keyinput3 )
in4xor_0 = xor( n16, keyinput4 )
in5xor_0 = xor( n71, keyinput5 )
in6xor_0 = xor( add2_i[3], keyinput6 )
in7xor_0 = xor( n72, keyinput7 )
in8xor_0 = xor( add1_i[3], keyinput8 )
in9xor_0 = xor( add2_i[10], keyinput9 )
in10xor_0 = xor( add1_i[4], keyinput10 )
in11xor_0 = xor( add2_i[11], keyinput11 )
in12xor_0 = xor( add2_i[4], keyinput12 )
in13xor_0 = xor( n58, keyinput13 )
in14xor_0 = xor( add2_i[5], keyinput14 )
in15xor_0 = xor( add1_i[5], keyinput15 )
in16xor_0 = xor( n50, keyinput16 )
in17xor_0 = xor( add1_i[12], keyinput17 )
in18xor_0 = xor( add2_i[9], keyinput18 )
in19xor_0 = xor( add1_i[11], keyinput19 )
in20xor_0 = xor( n69, keyinput20 )
in21xor_0 = xor( add2_i[8], keyinput21 )
in22xor_0 = xor( add1_i[10], keyinput22 )
in23xor_0 = xor( add2_i[7], keyinput23 )
in24xor_0 = xor( add1_i[9], keyinput24 )
in25xor_0 = xor( add2_i[6], keyinput25 )
in26xor_0 = xor( add1_i[8], keyinput26 )
in27xor_0 = xor( add1_i[7], keyinput27 )
in28xor_0 = xor( n18, keyinput28 )
in29xor_0 = xor( add1_i[6], keyinput29 )
in30xor_0 = xor( n63, keyinput30 )
in31xor_0 = xor( n46, keyinput31 )
inter30_b_0 = and( in0xor_b_0, in1xor_b_0 )
inter29_b_0 = and( in2xor_b_0, in3xor_b_0 )
inter28_b_0 = and( in4xor_b_0, in5xor_b_0 )
inter27_b_0 = and( in6xor_b_0, in7xor_b_0 )
inter26_b_0 = and( in8xor_b_0, in9xor_b_0 )
inter25_b_0 = and( in10xor_b_0, in11xor_b_0 )
inter24_b_0 = and( in12xor_b_0, in13xor_b_0 )
inter23_b_0 = and( in14xor_b_0, in15xor_b_0 )
inter22_b_0 = and( in16xor_b_0, in17xor_b_0 )
inter21_b_0 = and( in18xor_b_0, in19xor_b_0 )
inter20_b_0 = and( in20xor_b_0, in21xor_b_0 )
inter19_b_0 = and( in22xor_b_0, in23xor_b_0 )
inter18_b_0 = and( in24xor_b_0, in25xor_b_0 )
inter17_b_0 = and( in26xor_b_0, in27xor_b_0 )
inter16_b_0 = and( in28xor_b_0, in29xor_b_0 )
inter15_b_0 = and( in30xor_b_0, in31xor_b_0 )
inter14_b_0 = and( inter30_b_0, inter29_b_0 )
inter13_b_0 = and( inter28_b_0, inter27_b_0 )
inter12_b_0 = and( inter26_b_0, inter25_b_0 )
inter11_b_0 = and( inter24_b_0, inter23_b_0 )
inter10_b_0 = and( inter22_b_0, inter21_b_0 )
inter9_b_0 = and( inter20_b_0, inter19_b_0 )
inter8_b_0 = and( inter18_b_0, inter17_b_0 )
inter7_b_0 = and( inter16_b_0, inter15_b_0 )
inter6_b_0 = and( inter14_b_0, inter13_b_0 )
inter5_b_0 = and( inter12_b_0, inter11_b_0 )
inter4_b_0 = and( inter10_b_0, inter9_b_0 )
inter3_b_0 = and( inter8_b_0, inter7_b_0 )
inter2_b_0 = and( inter6_b_0, inter5_b_0 )
inter1_b_0 = and( inter4_b_0, inter3_b_0 )
inter0_b_0 = and( inter2_b_0, inter1_b_0 )
in0xor_b_0 = xor( n51, keyinput32 )
in1xor_b_0 = xor( n66, keyinput33 )
in2xor_b_0 = xor( n61, keyinput34 )
in3xor_b_0 = xor( n70, keyinput35 )
in4xor_b_0 = xor( n16, keyinput36 )
in5xor_b_0 = xor( n71, keyinput37 )
in6xor_b_0 = xor( add2_i[3], keyinput38 )
in7xor_b_0 = xor( n72, keyinput39 )
in8xor_b_0 = xor( add1_i[3], keyinput40 )
in9xor_b_0 = xor( add2_i[10], keyinput41 )
in10xor_b_0 = xor( add1_i[4], keyinput42 )
in11xor_b_0 = xor( add2_i[11], keyinput43 )
in12xor_b_0 = xor( add2_i[4], keyinput44 )
in13xor_b_0 = xor( n58, keyinput45 )
in14xor_b_0 = xor( add2_i[5], keyinput46 )
in15xor_b_0 = xor( add1_i[5], keyinput47 )
in16xor_b_0 = xor( n50, keyinput48 )
in17xor_b_0 = xor( add1_i[12], keyinput49 )
in18xor_b_0 = xor( add2_i[9], keyinput50 )
in19xor_b_0 = xor( add1_i[11], keyinput51 )
in20xor_b_0 = xor( n69, keyinput52 )
in21xor_b_0 = xor( add2_i[8], keyinput53 )
in22xor_b_0 = xor( add1_i[10], keyinput54 )
in23xor_b_0 = xor( add2_i[7], keyinput55 )
in24xor_b_0 = xor( add1_i[9], keyinput56 )
in25xor_b_0 = xor( add2_i[6], keyinput57 )
in26xor_b_0 = xor( add1_i[8], keyinput58 )
in27xor_b_0 = xor( add1_i[7], keyinput59 )
in28xor_b_0 = xor( n18, keyinput60 )
in29xor_b_0 = xor( add1_i[6], keyinput61 )
in30xor_b_0 = xor( n63, keyinput62 )
in31xor_b_0 = xor( n46, keyinput63 )
antisat_gbar_0 = not( inter0_b_0 )
antisat_out = and( antisat_g_0, antisat_gbar_0 )
