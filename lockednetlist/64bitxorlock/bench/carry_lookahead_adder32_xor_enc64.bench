# BENCH FILE 
# circuit:carry_lookahead_adder32.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add1_i[16])
INPUT(add1_i[17])
INPUT(add1_i[18])
INPUT(add1_i[19])
INPUT(add1_i[20])
INPUT(add1_i[21])
INPUT(add1_i[22])
INPUT(add1_i[23])
INPUT(add1_i[24])
INPUT(add1_i[25])
INPUT(add1_i[26])
INPUT(add1_i[27])
INPUT(add1_i[28])
INPUT(add1_i[29])
INPUT(add1_i[30])
INPUT(add1_i[31])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(add2_i[16])
INPUT(add2_i[17])
INPUT(add2_i[18])
INPUT(add2_i[19])
INPUT(add2_i[20])
INPUT(add2_i[21])
INPUT(add2_i[22])
INPUT(add2_i[23])
INPUT(add2_i[24])
INPUT(add2_i[25])
INPUT(add2_i[26])
INPUT(add2_i[27])
INPUT(add2_i[28])
INPUT(add2_i[29])
INPUT(add2_i[30])
INPUT(add2_i[31])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
INPUT(keyinput40)
INPUT(keyinput41)
INPUT(keyinput42)
INPUT(keyinput43)
INPUT(keyinput44)
INPUT(keyinput45)
INPUT(keyinput46)
INPUT(keyinput47)
INPUT(keyinput48)
INPUT(keyinput49)
INPUT(keyinput50)
INPUT(keyinput51)
INPUT(keyinput52)
INPUT(keyinput53)
INPUT(keyinput54)
INPUT(keyinput55)
INPUT(keyinput56)
INPUT(keyinput57)
INPUT(keyinput58)
INPUT(keyinput59)
INPUT(keyinput60)
INPUT(keyinput61)
INPUT(keyinput62)
INPUT(keyinput63)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
OUTPUT(result_o[17])
OUTPUT(result_o[18])
OUTPUT(result_o[19])
OUTPUT(result_o[20])
OUTPUT(result_o[21])
OUTPUT(result_o[22])
OUTPUT(result_o[23])
OUTPUT(result_o[24])
OUTPUT(result_o[25])
OUTPUT(result_o[26])
OUTPUT(result_o[27])
OUTPUT(result_o[28])
OUTPUT(result_o[29])
OUTPUT(result_o[30])
OUTPUT(result_o[31])
OUTPUT(result_o[32])
result_o[8] = xor( xenc2, n660 )
n660 = xor( add2_i[8], add1_i[8] )
result_o[6] = xor( n663, n664 )
n664 = xor( add2_i[6], add1_i[6] )
result_o[5] = xor( n665, xenc9 )
n666 = xor( add2_i[5], add1_i[5] )
result_o[3] = xor( n668, xenc29 )
n669 = xor( add2_i[3], add1_i[3] )
xenc7 = xor( n678, xenc17 )
n679 = xor( add2_i[30], add1_i[30] )
xenc3 = xor( n684, xenc12 )
n685 = xor( add2_i[2], add1_i[2] )
result_o[28] = xor( n690, n691 )
n691 = xor( add2_i[28], add1_i[28] )
xenc34 = xor( n700, xenc45 )
n701 = xor( add2_i[26], add1_i[26] )
result_o[24] = xor( n872, n711 )
n711 = xor( add2_i[24], add1_i[24] )
result_o[22] = xor( n720, n721 )
n721 = xor( add2_i[22], add1_i[22] )
result_o[20] = xor( xenc62, xenc26 )
n731 = xor( add2_i[20], add1_i[20] )
result_o[1] = xor( xenc21, n737 )
n737 = xor( add2_i[1], add1_i[1] )
result_o[18] = xor( n742, xenc32 )
n743 = xor( add2_i[18], add1_i[18] )
xenc51 = xor( n752, n753 )
n753 = xor( add2_i[16], add1_i[16] )
result_o[14] = xor( n762, n763 )
n763 = xor( add2_i[14], add1_i[14] )
xenc23 = xor( n772, n773 )
n773 = xor( add2_i[12], add1_i[12] )
result_o[10] = xor( n782, xenc24 )
n783 = xor( add2_i[10], add1_i[10] )
n736 = or( add2_i[0], add1_i[0] )
n830 = not( add2_i[8] )
n826 = not( add2_i[12] )
n832 = not( add2_i[16] )
n828 = not( add2_i[9] )
n836 = not( add2_i[11] )
n838 = not( add2_i[17] )
n834 = not( add2_i[18] )
n665 = nand( n814, n815 )
n814 = nand( add1_i[4], n803 )
n815 = nand( add2_i[4], n802 )
n816 = or( add2_i[0], add1_i[1] )
n817 = or( n827, n826 )
n889 = and( n817, n818 )
n818 = and( n819, n769 )
n819 = not( add1_i[13] )
n820 = or( xenc27, n832 )
n839 = and( n820, xenc48 )
n821 = and( n822, xenc13 )
n822 = not( add1_i[17] )
n823 = or( n831, n830 )
n829 = and( n823, n824 )
n824 = and( xenc55, n787 )
n825 = not( add1_i[9] )
n770 = or( n826, n827 )
n827 = nor( n772, add1_i[12] )
n785 = or( xenc31, xenc38 )
n864 = not( add2_i[10] )
n788 = or( n830, n831 )
n831 = nor( xenc2, add1_i[8] )
n750 = or( n832, xenc27 )
n833 = nor( n752, add1_i[16] )
n740 = or( n834, n835 )
n835 = nor( n742, add1_i[18] )
n888 = not( add2_i[13] )
n890 = not( add2_i[15] )
n875 = not( add2_i[25] )
n775 = or( xenc5, n837 )
n837 = nor( n777, add1_i[11] )
n745 = or( n838, n839 )
result_o[31] = xor( n840, n673 )
n840 = xor( add1_i[31], add2_i[31] )
result_o[27] = xor( n841, n695 )
n841 = xor( add1_i[27], add2_i[27] )
result_o[29] = xor( n842, xenc40 )
n842 = xor( add1_i[29], add2_i[29] )
result_o[23] = xor( n843, xenc50 )
n843 = xor( add1_i[23], add2_i[23] )
result_o[25] = xor( xenc57, n705 )
n844 = xor( add1_i[25], add2_i[25] )
n655 = not( add1_i[4] )
n845 = nor( n846, n847 )
n846 = and( add1_i[5], n802, add2_i[4] )
n847 = and( add1_i[5], n803, add1_i[4] )
n729 = or( xenc62, add1_i[20] )
n799 = or( n665, add1_i[5] )
n876 = nor( n848, n849 )
n848 = and( n871, add2_i[24] )
n849 = nand( n861, n707 )
n891 = nor( n850, xenc33 )
n850 = and( n761, add2_i[14] )
n851 = nand( n860, n759 )
result_o[17] = xor( n852, n747 )
n852 = xor( add1_i[17], add2_i[17] )
xenc58 = xor( n853, n735 )
n853 = xor( add1_i[19], add2_i[19] )
result_o[15] = xor( n854, n757 )
n854 = xor( add1_i[15], add2_i[15] )
n726 = xnor( add1_i[21], add2_i[21] )
result_o[13] = xor( n855, n767 )
n855 = xor( add1_i[13], add2_i[13] )
result_o[9] = xor( xenc36, n658 )
n856 = xor( add1_i[9], add2_i[9] )
xenc46 = xor( xenc6, n777 )
n857 = xor( add1_i[11], add2_i[11] )
result_o[7] = xor( n858, xenc39 )
n858 = xor( add1_i[7], add2_i[7] )
result_o[4] = xor( n656, n859 )
n859 = xor( add2_i[4], n655 )
n860 = not( add1_i[15] )
n861 = not( add1_i[25] )
n714 = nand( n717, n862 )
n862 = and( xenc63, n863 )
n863 = not( add1_i[23] )
n780 = or( xenc20, n864 )
n865 = nor( n782, add1_i[10] )
n866 = nand( n714, xenc52 )
n707 = and( n866, n867 )
n867 = or( n868, xenc47 )
n868 = not( add1_i[24] )
n869 = and( add2_i[23], add1_i[24] )
n870 = nand( add2_i[23], n714 )
n708 = nand( n871, add2_i[24] )
n871 = nand( n873, n874 )
n872 = nand( xenc47, n870 )
n873 = nand( n714, add2_i[23] )
n874 = and( n868, xenc47 )
n703 = or( n876, xenc8 )
n877 = nand( n729, n880 )
n722 = and( n877, xenc43 )
n878 = or( xenc10, n727 )
n879 = not( add1_i[21] )
n880 = and( add2_i[20], add1_i[21] )
n881 = nand( n729, add2_i[20] )
n724 = nand( n881, n882 )
n882 = and( xenc10, n727 )
n725 = nand( n727, n728 )
n805 = nand( add2_i[3], n806 )
n792 = nand( n883, xenc41 )
n883 = and( xenc60, xenc49 )
n884 = not( add1_i[7] )
n662 = nand( xenc41, xenc60 )
n885 = nand( n799, add2_i[5] )
n795 = nand( n885, n886 )
n886 = and( n887, n845 )
n887 = not( add1_i[6] )
n813 = nand( add2_i[0], add1_i[0] )
n663 = nand( n798, n845 )
n676 = nand( add2_i[30], n677 )
n798 = nand( n799, add2_i[5] )
n688 = nand( add2_i[28], xenc56 )
n683 = nand( n687, xenc18 )
n747 = nand( xenc13, n750 )
n767 = nand( n769, n770 )
n765 = or( n888, xenc44 )
n755 = or( n890, xenc0 )
n811 = nand( add2_i[1], n812 )
n684 = nand( xenc25, xenc1 )
n658 = nand( n787, xenc28 )
n705 = nand( n707, xenc35 )
result_o[32] = nand( n670, n671 )
n695 = nand( xenc22, n698 )
n718 = nand( add2_i[22], n719 )
n727 = nand( add1_i[20], xenc62 )
n760 = nand( add2_i[14], n761 )
n769 = nand( add1_i[12], n772 )
n787 = nand( add1_i[8], xenc2 )
n794 = nand( add2_i[6], n795 )
n804 = nand( add1_i[3], n668 )
n806 = or( n668, add1_i[3] )
n807 = nand( add1_i[2], n684 )
n809 = or( n684, add1_i[2] )
n728 = nand( add2_i[20], n729 )
n671 = nand( add2_i[31], n672 )
n698 = nand( add2_i[26], n699 )
n700 = nand( n703, xenc16 )
n752 = nand( n755, xenc61 )
n668 = nand( xenc37, n808 )
n808 = nand( add2_i[2], n809 )
n730 = nand( n732, n733 )
n733 = nand( add2_i[19], n734 )
n772 = nand( n774, n775 )
n659 = nand( xenc14, n791 )
n791 = nand( xenc15, add2_i[7] )
n675 = nand( add1_i[30], n678 )
n677 = or( n678, add1_i[30] )
n687 = nand( add1_i[28], n690 )
n689 = or( n690, add1_i[28] )
n717 = nand( add1_i[22], n720 )
n719 = or( n720, add1_i[22] )
n739 = nand( add1_i[18], n742 )
n759 = nand( add1_i[14], n762 )
n761 = or( n762, add1_i[14] )
n779 = nand( add1_i[10], n782 )
n673 = nand( n675, n676 )
n715 = nand( n717, xenc63 )
n735 = nand( n739, xenc4 )
n757 = nand( n759, n760 )
n777 = nand( n780, n779 )
n802 = nand( n656, n655 )
n678 = nand( n680, n681 )
n681 = nand( add2_i[29], xenc59 )
n690 = nand( n692, n693 )
n693 = nand( add2_i[27], xenc42 )
n720 = nand( n722, n723 )
n723 = nand( n724, add2_i[21] )
n742 = nand( n744, n745 )
n762 = nand( n764, xenc53 )
n782 = nand( xenc19, xenc54 )
n803 = nand( xenc30, n804 )
result_o[0] = nand( xenc21, n813 )
xenc11 = xnor( n726, n725 )
n670 = nand( add1_i[31], n673 )
n672 = or( n673, add1_i[31] )
n680 = nand( add1_i[29], xenc40 )
n682 = or( xenc40, add1_i[29] )
n692 = nand( add1_i[27], n695 )
n694 = or( n695, add1_i[27] )
n697 = nand( add1_i[26], n700 )
n699 = or( n700, add1_i[26] )
n702 = nand( add1_i[25], n705 )
n712 = nand( add1_i[23], xenc50 )
n732 = nand( add1_i[19], n735 )
n734 = or( n735, add1_i[19] )
n744 = nand( add1_i[17], n747 )
n749 = nand( add1_i[16], n752 )
n754 = nand( add1_i[15], n757 )
n764 = nand( add1_i[13], n767 )
n774 = nand( add1_i[11], n777 )
n784 = nand( add1_i[9], n658 )
n790 = nand( add1_i[7], xenc39 )
n793 = nand( add1_i[6], n663 )
n656 = not( n803 )
n810 = nand( add1_i[1], xenc21 )
n812 = or( n816, add1_i[0] )
xenc0 = xor( n891, keyinput0 )
xenc1 = xor( n811, keyinput1 )
xenc2 = xnor( n659, keyinput2 )
result_o[2] = xor( xenc3, keyinput3 )
xenc4 = xor( n740, keyinput4 )
xenc5 = xnor( n836, keyinput5 )
xenc6 = xor( n857, keyinput6 )
result_o[30] = xnor( xenc7, keyinput7 )
xenc8 = xor( n875, keyinput8 )
xenc9 = xor( n666, keyinput9 )
xenc10 = xor( n879, keyinput10 )
result_o[21] = xor( xenc11, keyinput11 )
xenc12 = xnor( n685, keyinput12 )
xenc13 = xnor( n749, keyinput13 )
xenc14 = xnor( n790, keyinput14 )
xenc15 = xor( n792, keyinput15 )
xenc16 = xor( n702, keyinput16 )
xenc17 = xor( n679, keyinput17 )
xenc18 = xnor( n688, keyinput18 )
xenc19 = xor( n784, keyinput19 )
xenc20 = xor( n865, keyinput20 )
xenc21 = xor( n736, keyinput21 )
xenc22 = xnor( n697, keyinput22 )
result_o[12] = xnor( xenc23, keyinput23 )
xenc24 = xnor( n783, keyinput24 )
xenc25 = xnor( n810, keyinput25 )
xenc26 = xnor( n731, keyinput26 )
xenc27 = xnor( n833, keyinput27 )
xenc28 = xnor( n788, keyinput28 )
xenc29 = xnor( n669, keyinput29 )
xenc30 = xor( n805, keyinput30 )
xenc31 = xor( n829, keyinput31 )
xenc32 = xor( n743, keyinput32 )
xenc33 = xor( n851, keyinput33 )
result_o[26] = xnor( xenc34, keyinput34 )
xenc35 = xor( n708, keyinput35 )
xenc36 = xnor( n856, keyinput36 )
xenc37 = xnor( n807, keyinput37 )
xenc38 = xor( n828, keyinput38 )
xenc39 = xor( n662, keyinput39 )
xenc40 = xor( n683, keyinput40 )
xenc41 = xnor( n793, keyinput41 )
xenc42 = xor( n694, keyinput42 )
xenc43 = xnor( n878, keyinput43 )
xenc44 = xnor( n889, keyinput44 )
xenc45 = xor( n701, keyinput45 )
result_o[11] = xor( xenc46, keyinput46 )
xenc47 = xor( n712, keyinput47 )
xenc48 = xnor( n821, keyinput48 )
xenc49 = xor( n884, keyinput49 )
xenc50 = xor( n715, keyinput50 )
result_o[16] = xor( xenc51, keyinput51 )
xenc52 = xor( n869, keyinput52 )
xenc53 = xor( n765, keyinput53 )
xenc54 = xnor( n785, keyinput54 )
xenc55 = xor( n825, keyinput55 )
xenc56 = xor( n689, keyinput56 )
xenc57 = xnor( n844, keyinput57 )
result_o[19] = xor( xenc58, keyinput58 )
xenc59 = xor( n682, keyinput59 )
xenc60 = xnor( n794, keyinput60 )
xenc61 = xor( n754, keyinput61 )
xenc62 = xor( n730, keyinput62 )
xenc63 = xnor( n718, keyinput63 )
