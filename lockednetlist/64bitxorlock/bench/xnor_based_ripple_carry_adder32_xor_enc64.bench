# BENCH FILE 
# circuit:xnor_based_ripple_carry_adder32.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add1_i[16])
INPUT(add1_i[17])
INPUT(add1_i[18])
INPUT(add1_i[19])
INPUT(add1_i[20])
INPUT(add1_i[21])
INPUT(add1_i[22])
INPUT(add1_i[23])
INPUT(add1_i[24])
INPUT(add1_i[25])
INPUT(add1_i[26])
INPUT(add1_i[27])
INPUT(add1_i[28])
INPUT(add1_i[29])
INPUT(add1_i[30])
INPUT(add1_i[31])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(add2_i[16])
INPUT(add2_i[17])
INPUT(add2_i[18])
INPUT(add2_i[19])
INPUT(add2_i[20])
INPUT(add2_i[21])
INPUT(add2_i[22])
INPUT(add2_i[23])
INPUT(add2_i[24])
INPUT(add2_i[25])
INPUT(add2_i[26])
INPUT(add2_i[27])
INPUT(add2_i[28])
INPUT(add2_i[29])
INPUT(add2_i[30])
INPUT(add2_i[31])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
INPUT(keyinput40)
INPUT(keyinput41)
INPUT(keyinput42)
INPUT(keyinput43)
INPUT(keyinput44)
INPUT(keyinput45)
INPUT(keyinput46)
INPUT(keyinput47)
INPUT(keyinput48)
INPUT(keyinput49)
INPUT(keyinput50)
INPUT(keyinput51)
INPUT(keyinput52)
INPUT(keyinput53)
INPUT(keyinput54)
INPUT(keyinput55)
INPUT(keyinput56)
INPUT(keyinput57)
INPUT(keyinput58)
INPUT(keyinput59)
INPUT(keyinput60)
INPUT(keyinput61)
INPUT(keyinput62)
INPUT(keyinput63)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
OUTPUT(result_o[17])
OUTPUT(result_o[18])
OUTPUT(result_o[19])
OUTPUT(result_o[20])
OUTPUT(result_o[21])
OUTPUT(result_o[22])
OUTPUT(result_o[23])
OUTPUT(result_o[24])
OUTPUT(result_o[25])
OUTPUT(result_o[26])
OUTPUT(result_o[27])
OUTPUT(result_o[28])
OUTPUT(result_o[29])
OUTPUT(result_o[30])
OUTPUT(result_o[31])
OUTPUT(result_o[32])
result_o[8] = xor( add2_i[8], n345 )
n203 = xor( add2_i[3], add1_i[3] )
result_o[29] = xor( add2_i[29], n331 )
result_o[28] = xor( xenc40, n228 )
result_o[25] = xor( xenc59, add2_i[25] )
result_o[24] = xor( xenc0, add2_i[24] )
result_o[22] = xor( add2_i[22], xenc15 )
result_o[16] = xor( add2_i[16], n280 )
result_o[15] = xor( n284, add2_i[15] )
result_o[14] = xor( add2_i[14], xenc21 )
result_o[13] = xor( add2_i[13], n292 )
result_o[12] = xor( add2_i[12], n296 )
result_o[10] = xor( add2_i[10], xenc62 )
n190 = xor( add1_i[7], add2_i[7] )
n199 = xor( add1_i[4], add2_i[4] )
n216 = xor( add1_i[2], add2_i[2] )
n267 = xor( add1_i[0], add2_i[0] )
n326 = xnor( n277, n348 )
n327 = not( n210 )
n328 = not( n327 )
n325 = or( n217, xenc3, n218 )
n340 = nand( xenc56, add1_i[18] )
n329 = not( n274 )
n322 = nand( n183, n199, n201 )
n339 = nand( n326, add2_i[17], add1_i[18] )
n313 = nand( n179, xenc46, n322, n315 )
n335 = and( n339, add2_i[18], xenc33 )
n320 = nand( n195, add2_i[5], add1_i[5] )
n249 = nand( n248, n251, add2_i[22] )
result_o[9] = xor( add2_i[9], n187 )
result_o[11] = xor( add2_i[11], xenc60 )
xenc31 = xor( add2_i[17], n326 )
result_o[19] = xor( add2_i[19], n263 )
xenc34 = xor( add2_i[20], n260 )
xenc20 = xor( add2_i[21], n255 )
result_o[26] = xor( add2_i[26], n233 )
xenc28 = xor( add2_i[30], xenc38 )
result_o[31] = xor( xenc54, add2_i[31] )
n343 = not( add1_i[24] )
n342 = not( add1_i[19] )
n346 = not( add1_i[25] )
n330 = not( n214 )
n331 = not( xenc1 )
n332 = and( xenc46, n322 )
n333 = nand( n209, n208 )
n268 = and( add1_i[1], add2_i[1] )
n334 = or( add1_i[0], add2_i[0] )
n270 = nand( n336, n335 )
n336 = or( n273, add1_i[18] )
n337 = nand( n212, xenc55 )
n338 = nand( n235, n236 )
n269 = and( n339, xenc33 )
n341 = nand( n231, xenc22 )
n263 = xnor( xenc51, n342 )
n241 = xnor( n242, n343 )
n344 = not( n188 )
n345 = not( n344 )
n237 = xnor( n238, n346 )
n350 = not( add1_i[13] )
n217 = nor( n334, n268 )
n347 = xor( n242, add1_i[24] )
n349 = not( add1_i[15] )
n348 = not( add1_i[17] )
n276 = xnor( n277, n348 )
n284 = xnor( n285, n349 )
n292 = xnor( n293, xenc39 )
n351 = not( add1_i[14] )
n352 = not( add1_i[16] )
n288 = xnor( n289, n351 )
n280 = xnor( n281, xenc53 )
n353 = nor( add1_i[0], add2_i[0], n367 )
n362 = not( add1_i[29] )
n355 = not( add1_i[12] )
n354 = not( add1_i[20] )
n356 = not( add1_i[30] )
n260 = xnor( n259, n354 )
n296 = xnor( xenc47, xenc52 )
n210 = xnor( n211, n356 )
n357 = xor( add1_i[6], add2_i[6] )
n361 = not( add1_i[21] )
n358 = not( add1_i[26] )
n360 = not( add1_i[31] )
n233 = xnor( n234, xenc13 )
n359 = xnor( add1_i[2], add2_i[2] )
n206 = xnor( xenc19, xenc32 )
n255 = xnor( xenc9, n361 )
n214 = xnor( n215, n362 )
n183 = not( n200 )
n181 = not( n193 )
result_o[7] = nor( n189, n190 )
n189 = nor( n191, xenc4 )
xenc7 = nor( n199, n369, n200 )
result_o[0] = not( n267 )
n366 = not( add1_i[11] )
n365 = not( add1_i[9] )
n195 = xor( add1_i[6], add2_i[6] )
n193 = xnor( add1_i[5], add2_i[5] )
n218 = nor( add2_i[1], add1_i[1] )
n200 = nor( add2_i[3], add1_i[3] )
n319 = nand( add1_i[6], add2_i[6] )
n221 = nand( n222, n178 )
n228 = xnor( add2_i[28], n178 )
result_o[23] = xor( n363, n246 )
n363 = xor( add1_i[23], add2_i[23] )
n250 = and( n251, n248 )
n315 = nand( add2_i[7], add1_i[7] )
n321 = nand( add1_i[4], add2_i[4] )
result_o[18] = xnor( add2_i[18], n364 )
n364 = nand( xenc8, n272 )
n178 = not( add1_i[28] )
n186 = not( add2_i[27] )
n196 = nor( xenc12, xenc49 )
n198 = and( add1_i[5], add2_i[5] )
xenc25 = nor( n265, xenc36 )
n265 = nor( n367, n218 )
n266 = nor( add1_i[0], n267 )
n304 = and( n305, xenc16 )
n239 = nand( add1_i[24], n242 )
n309 = nand( xenc30, n311 )
n187 = xnor( n309, xenc58 )
n300 = xnor( n366, n301 )
n367 = and( add1_i[1], add2_i[1] )
n312 = nand( n315, xenc23 )
n179 = not( xenc4 )
n316 = nand( n190, xenc43 )
n317 = nand( n179, xenc27 )
n368 = and( n324, xenc6 )
n369 = and( xenc61, xenc6 )
n324 = nand( add1_i[2], add2_i[2] )
n323 = nand( add2_i[3], add1_i[3] )
n202 = and( xenc17, n324 )
xenc50 = nor( xenc61, n203 )
n201 = nand( xenc17, n368 )
n212 = nand( add1_i[29], n215 )
n290 = nand( n293, add1_i[13] )
n298 = nand( add1_i[11], n301 )
n307 = nand( n309, add1_i[9] )
n215 = nand( n219, n220 )
n220 = nand( add2_i[28], n221 )
n293 = nand( xenc18, n294 )
n301 = nand( xenc63, xenc16 )
n303 = nand( add2_i[10], xenc62 )
n242 = nand( n244, xenc42 )
n244 = nand( n245, add2_i[23] )
n272 = or( n273, add1_i[18] )
n264 = nand( n270, xenc8 )
n261 = nand( add1_i[19], xenc51 )
n231 = nand( add1_i[26], xenc35 )
n246 = nand( n249, n248 )
n273 = nand( xenc10, n274 )
n274 = nand( add1_i[17], n277 )
n204 = nand( add1_i[31], n333 )
n208 = nand( add1_i[30], n337 )
n253 = nand( add1_i[21], xenc9 )
n277 = nand( n279, n278 )
n207 = nand( n209, n208 )
n211 = nand( n212, xenc55 )
n234 = nand( n235, n236 )
n256 = nand( n257, n258 )
n281 = nand( n283, n282 )
n282 = nand( n285, add1_i[15] )
n305 = or( n306, add1_i[10] )
n302 = nand( add1_i[10], n306 )
n188 = xnor( xenc44, add1_i[8] )
n235 = nand( add1_i[25], n238 )
n248 = nand( add1_i[22], n252 )
n251 = or( n252, add1_i[22] )
n286 = nand( add1_i[14], n289 )
n294 = nand( add1_i[12], xenc47 )
n306 = nand( n308, n307 )
n311 = nand( xenc11, xenc45, add1_i[8] )
n314 = nand( xenc45, xenc11 )
result_o[6] = nor( n196, n357 )
result_o[27] = xnor( add2_i[27], n230 )
n180 = not( n357 )
n219 = nand( add1_i[28], xenc40 )
n229 = or( n230, n186 )
n226 = nand( n231, xenc22 )
n238 = nand( n239, n240 )
n252 = nand( n254, n253 )
n285 = nand( n287, xenc5 )
n289 = nand( n291, n290 )
n318 = nand( xenc29, n357 )
n192 = nand( n319, n320 )
xenc24 = nand( xenc37, xenc41 )
result_o[5] = nor( n332, xenc29 )
n205 = nand( add2_i[31], xenc54 )
n197 = nor( n332, n193 )
n191 = nor( n193, n332, n180 )
n227 = nand( n229, n225 )
n222 = nand( xenc48, n224 )
n224 = nand( n225, n186 )
n243 = nand( add1_i[23], n246 )
n245 = or( n246, add1_i[23] )
n258 = nand( add1_i[20], n259 )
n257 = nand( add2_i[20], n260 )
n259 = nand( xenc26, xenc2 )
n278 = nand( add1_i[16], n281 )
n283 = nand( add2_i[15], n284 )
n297 = nand( xenc57, n298 )
n310 = nand( n188, add2_i[8] )
result_o[2] = nor( n216, n353, n218 )
n209 = nand( add2_i[30], n210 )
n213 = nand( add2_i[29], n214 )
n223 = or( n341, add1_i[27] )
n225 = nand( add1_i[27], n341 )
n230 = xnor( n226, add1_i[27] )
n232 = nand( add2_i[26], n233 )
n236 = nand( add2_i[25], xenc59 )
n240 = nand( n241, add2_i[24] )
n254 = nand( n255, add2_i[21] )
n262 = nand( add2_i[19], n263 )
n275 = nand( xenc14, add2_i[17] )
n279 = nand( n280, add2_i[16] )
n287 = nand( add2_i[14], xenc21 )
n291 = nand( add2_i[13], n292 )
n295 = nand( add2_i[12], n296 )
n299 = nand( add2_i[11], xenc60 )
n308 = nand( add2_i[9], n187 )
xenc0 = xor( n347, keyinput0 )
xenc1 = xor( n330, keyinput1 )
xenc2 = xor( n262, keyinput2 )
xenc3 = xnor( n359, keyinput3 )
xenc4 = xor( n192, keyinput4 )
xenc5 = xnor( n286, keyinput5 )
xenc6 = xnor( n323, keyinput6 )
result_o[4] = xor( xenc7, keyinput7 )
xenc8 = xnor( n269, keyinput8 )
xenc9 = xor( n256, keyinput9 )
xenc10 = xor( n275, keyinput10 )
xenc11 = xnor( n312, keyinput11 )
xenc12 = xnor( n197, keyinput12 )
xenc13 = xor( n358, keyinput13 )
xenc14 = xor( n276, keyinput14 )
xenc15 = xnor( n250, keyinput15 )
xenc16 = xnor( n302, keyinput16 )
xenc17 = xor( n325, keyinput17 )
xenc18 = xnor( n295, keyinput18 )
xenc19 = xnor( n207, keyinput19 )
result_o[21] = xnor( xenc20, keyinput20 )
xenc21 = xor( n288, keyinput21 )
xenc22 = xnor( n232, keyinput22 )
xenc23 = xnor( n316, keyinput23 )
result_o[32] = xnor( xenc24, keyinput24 )
result_o[1] = xnor( xenc25, keyinput25 )
xenc26 = xor( n261, keyinput26 )
xenc27 = xor( n318, keyinput27 )
result_o[30] = xnor( xenc28, keyinput28 )
xenc29 = xnor( n181, keyinput29 )
xenc30 = xnor( n310, keyinput30 )
result_o[17] = xnor( xenc31, keyinput31 )
xenc32 = xnor( n360, keyinput32 )
xenc33 = xor( n340, keyinput33 )
result_o[20] = xnor( xenc34, keyinput34 )
xenc35 = xor( n338, keyinput35 )
xenc36 = xor( n266, keyinput36 )
xenc37 = xnor( n204, keyinput37 )
xenc38 = xnor( n328, keyinput38 )
xenc39 = xnor( n350, keyinput39 )
xenc40 = xor( n227, keyinput40 )
xenc41 = xor( n205, keyinput41 )
xenc42 = xnor( n243, keyinput42 )
xenc43 = xnor( n317, keyinput43 )
xenc44 = xor( n314, keyinput44 )
xenc45 = xor( n313, keyinput45 )
xenc46 = xnor( n321, keyinput46 )
xenc47 = xor( n297, keyinput47 )
xenc48 = xnor( n223, keyinput48 )
xenc49 = xnor( n198, keyinput49 )
result_o[3] = xor( xenc50, keyinput50 )
xenc51 = xnor( n264, keyinput51 )
xenc52 = xnor( n355, keyinput52 )
xenc53 = xor( n352, keyinput53 )
xenc54 = xor( n206, keyinput54 )
xenc55 = xnor( n213, keyinput55 )
xenc56 = xnor( n329, keyinput56 )
xenc57 = xnor( n299, keyinput57 )
xenc58 = xnor( n365, keyinput58 )
xenc59 = xnor( n237, keyinput59 )
xenc60 = xor( n300, keyinput60 )
xenc61 = xnor( n202, keyinput61 )
xenc62 = xnor( n304, keyinput62 )
xenc63 = xor( n303, keyinput63 )
