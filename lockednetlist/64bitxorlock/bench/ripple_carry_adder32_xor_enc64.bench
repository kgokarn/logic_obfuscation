# BENCH FILE 
# circuit:ripple_carry_adder32.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add1_i[16])
INPUT(add1_i[17])
INPUT(add1_i[18])
INPUT(add1_i[19])
INPUT(add1_i[20])
INPUT(add1_i[21])
INPUT(add1_i[22])
INPUT(add1_i[23])
INPUT(add1_i[24])
INPUT(add1_i[25])
INPUT(add1_i[26])
INPUT(add1_i[27])
INPUT(add1_i[28])
INPUT(add1_i[29])
INPUT(add1_i[30])
INPUT(add1_i[31])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(add2_i[16])
INPUT(add2_i[17])
INPUT(add2_i[18])
INPUT(add2_i[19])
INPUT(add2_i[20])
INPUT(add2_i[21])
INPUT(add2_i[22])
INPUT(add2_i[23])
INPUT(add2_i[24])
INPUT(add2_i[25])
INPUT(add2_i[26])
INPUT(add2_i[27])
INPUT(add2_i[28])
INPUT(add2_i[29])
INPUT(add2_i[30])
INPUT(add2_i[31])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
INPUT(keyinput40)
INPUT(keyinput41)
INPUT(keyinput42)
INPUT(keyinput43)
INPUT(keyinput44)
INPUT(keyinput45)
INPUT(keyinput46)
INPUT(keyinput47)
INPUT(keyinput48)
INPUT(keyinput49)
INPUT(keyinput50)
INPUT(keyinput51)
INPUT(keyinput52)
INPUT(keyinput53)
INPUT(keyinput54)
INPUT(keyinput55)
INPUT(keyinput56)
INPUT(keyinput57)
INPUT(keyinput58)
INPUT(keyinput59)
INPUT(keyinput60)
INPUT(keyinput61)
INPUT(keyinput62)
INPUT(keyinput63)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
OUTPUT(result_o[17])
OUTPUT(result_o[18])
OUTPUT(result_o[19])
OUTPUT(result_o[20])
OUTPUT(result_o[21])
OUTPUT(result_o[22])
OUTPUT(result_o[23])
OUTPUT(result_o[24])
OUTPUT(result_o[25])
OUTPUT(result_o[26])
OUTPUT(result_o[27])
OUTPUT(result_o[28])
OUTPUT(result_o[29])
OUTPUT(result_o[30])
OUTPUT(result_o[31])
OUTPUT(result_o[32])
n886 = or( add2_i[0], add1_i[0] )
result_o[8] = xor( xenc16, n812 )
result_o[6] = xor( add2_i[6], n816 )
result_o[5] = xor( add2_i[5], n817 )
xenc57 = xor( xenc10, xenc42 )
n820 = xor( add2_i[3], add1_i[3] )
xenc48 = xor( n837, add2_i[2] )
result_o[28] = xor( add2_i[28], xenc31 )
result_o[27] = xor( add2_i[27], n846 )
xenc38 = xor( xenc18, n857 )
xenc8 = xor( n859, add2_i[25] )
result_o[24] = xor( n863, n864 )
n864 = xor( add2_i[24], add1_i[24] )
xenc63 = xor( add2_i[23], n867 )
xenc23 = xor( add2_i[22], n871 )
xenc26 = xor( add2_i[21], n875 )
xenc2 = xor( n886, xenc32 )
n887 = xor( add2_i[1], add1_i[1] )
xenc59 = xor( xenc56, add2_i[19] )
result_o[18] = xor( n894, xenc19 )
result_o[15] = xor( add2_i[15], n907 )
result_o[14] = xor( n912, n913 )
n913 = xor( add2_i[14], add1_i[14] )
xenc22 = xor( xenc41, add2_i[12] )
result_o[11] = xor( n926, xenc35 )
n927 = xor( add2_i[11], add1_i[11] )
result_o[10] = xor( xenc53, add2_i[10] )
n837 = xor( n960, add1_i[2] )
n841 = nand( n796, n992 )
n911 = nand( n1002, n915, n1001 )
n995 = nand( n836, add2_i[28], add1_i[29], n998 )
n977 = xor( n931, add1_i[10] )
n957 = nand( xenc28, n959, n958 )
n965 = not( add1_i[3] )
n996 = nand( xenc36, add1_i[28], add1_i[29] )
n893 = nand( n800, n900, n901 )
n974 = nor( n966, add1_i[11] )
n966 = not( n928 )
n985 = and( xenc15, n988, n948 )
n1000 = nor( n967, add1_i[24] )
n967 = not( n865 )
n969 = nand( n902, add2_i[16], add1_i[17] )
n827 = nand( n976, n995, n996, n830 )
n938 = nand( n937, xenc51, add2_i[6] )
n921 = xor( xenc21, add1_i[12] )
n871 = xor( n872, add1_i[22] )
n859 = xor( n855, add1_i[25] )
n840 = nor( n968, xenc58, n980 )
n968 = not( n983 )
result_o[0] = xnor( add2_i[0], add1_i[0] )
result_o[4] = xor( add2_i[4], n818 )
n903 = xnor( n904, add1_i[16] )
n896 = and( add2_i[17], n893, n799 )
n880 = xnor( n881, add1_i[20] )
xenc40 = xor( n823, add2_i[31] )
n848 = and( n849, xenc61 )
n1003 = not( add1_i[4] )
n897 = nand( n969, n970 )
n970 = or( n800, n901 )
n971 = nand( xenc30, n910 )
n972 = nand( n815, n936 )
n973 = nand( n977, add2_i[10] )
n925 = nand( n973, xenc5 )
n975 = nand( xenc46, n860 )
n976 = not( add1_i[30] )
n815 = and( n941, xenc7 )
n816 = and( xenc51, n937 )
n890 = nand( n892, n978 )
n978 = nor( n897, add1_i[18] )
n979 = and( n817, n988 )
n998 = nor( n980, xenc58 )
n980 = and( add1_i[28], n990 )
n981 = and( n991, add1_i[28] )
n982 = or( n991, add1_i[28], n990 )
n983 = or( n991, add1_i[28], n990 )
n836 = or( n991, add1_i[28], n990 )
n984 = nor( n979, n986 )
n937 = nor( n985, n986 )
n986 = nor( xenc25, xenc15 )
n987 = not( add1_i[6] )
n988 = and( add2_i[5], add1_i[6] )
n989 = or( n918, add1_i[13] )
n990 = nor( n992, xenc13 )
n991 = nor( xenc44, n848 )
n916 = or( n918, add1_i[13] )
n845 = nor( xenc44, n848 )
n992 = nand( add2_i[27], n847 )
n993 = nand( xenc30, n910 )
n994 = nand( n933, n801, xenc1 )
n831 = and( n995, n996 )
n997 = not( add1_i[29] )
n999 = nand( n867, add2_i[23] )
n862 = nand( n999, n1000 )
n1001 = nand( xenc37, add2_i[13] )
n1002 = not( add1_i[14] )
n818 = xnor( n954, n1003 )
n1005 = not( add1_i[21] )
n1004 = not( add1_i[10] )
n930 = xnor( n931, n1004 )
n875 = xnor( n876, n1005 )
n1006 = not( add1_i[19] )
n1007 = not( add1_i[31] )
n884 = xnor( xenc33, n1006 )
n823 = xnor( xenc49, n1007 )
n1012 = not( add1_i[15] )
n1011 = not( add1_i[23] )
n830 = nand( n833, add2_i[29] )
n833 = nand( n834, n997, n835 )
n850 = nand( add2_i[26], n851 )
n851 = nand( n852, n798, n853 )
n801 = not( add1_i[9] )
n857 = xnor( add2_i[26], n798 )
n948 = or( n951, add1_i[5] )
xenc45 = xor( xenc62, xenc14 )
n1008 = xor( add1_i[30], add2_i[30] )
result_o[29] = xor( n1009, n832 )
n1009 = xor( add1_i[29], add2_i[29] )
n834 = nand( add1_i[28], xenc36 )
n802 = not( add1_i[8] )
xenc54 = xnor( add2_i[20], n880 )
n933 = nand( add2_i[8], n939 )
n940 = nand( add2_i[7], n944 )
n852 = nand( add2_i[25], xenc29 )
n945 = nand( add2_i[6], xenc51 )
n803 = not( add1_i[7] )
n894 = xnor( add1_i[18], add2_i[18] )
result_o[17] = xnor( add2_i[17], n898 )
result_o[13] = xnor( add2_i[13], n917 )
result_o[16] = xnor( add2_i[16], n903 )
n800 = not( add1_i[17] )
n812 = xnor( add2_i[8], n802 )
n798 = not( add1_i[26] )
result_o[7] = xnor( add2_i[7], n1010 )
n1010 = nand( n814, n815 )
xenc52 = xnor( add2_i[9], xenc47 )
n797 = not( add1_i[27] )
n943 = nand( xenc15, xenc25, n947 )
n885 = nand( n888, n889 )
n867 = xnor( xenc34, n1011 )
n907 = xnor( n993, n1012 )
n902 = or( n904, add1_i[16] )
n879 = or( n881, add1_i[20] )
n917 = nand( n915, xenc37 )
n910 = nand( n911, add2_i[14] )
n924 = nand( n925, add2_i[11] )
n922 = nand( n924, n923 )
n855 = nand( xenc46, n860 )
n861 = nand( add2_i[24], xenc0 )
n947 = nand( n948, add2_i[5] )
n824 = nand( n825, n826 )
n956 = nand( xenc43, add2_i[3] )
n914 = nand( n916, add2_i[13] )
n846 = and( n796, n847 )
n826 = nand( n827, add2_i[30] )
n817 = and( xenc15, n948 )
n958 = nand( add1_i[2], n960 )
n954 = nand( n956, n955 )
n952 = nand( add1_i[4], n954 )
n847 = nand( n848, xenc44 )
n873 = nand( add1_i[21], n876 )
n889 = nand( xenc55, add2_i[18] )
n919 = nand( add1_i[12], xenc21 )
n912 = nand( n914, n915 )
n900 = nand( n902, add2_i[16] )
n960 = nand( xenc6, xenc60 )
n962 = nand( n963, add2_i[1] )
n876 = nand( n877, xenc3 )
n877 = nand( n879, add2_i[20] )
n821 = nand( add1_i[31], xenc49 )
n863 = nand( n865, n866 )
n865 = nand( xenc34, add1_i[23] )
n928 = nand( n931, add1_i[10] )
n931 = nand( n810, n932 )
n939 = nand( n940, n802, n815 )
n946 = nand( add1_i[5], n951 )
n832 = nand( n834, n839 )
n868 = nand( xenc4, n869 )
n869 = nand( n872, add1_i[22] )
n905 = nand( n971, add1_i[15] )
n915 = nand( add1_i[13], n918 )
n951 = nand( n953, n952 )
n819 = nand( n959, n958 )
n828 = nand( n831, n830 )
n839 = nand( add2_i[28], xenc31 )
n849 = nand( add1_i[26], xenc18 )
n888 = nand( add1_i[18], xenc20 )
n891 = nand( n892, n799 )
n918 = nand( xenc17, xenc50 )
n810 = nand( n935, add1_i[9] )
n934 = nand( add1_i[8], n811 )
n898 = nand( n893, n799 )
n835 = nand( add2_i[28], n982 )
n856 = nand( n853, n858 )
n853 = nand( add1_i[25], n975 )
n854 = or( n975, add1_i[25] )
n872 = nand( xenc27, n873 )
n878 = nand( add1_i[20], n881 )
n892 = nand( add2_i[17], n893 )
n926 = nand( n928, n929 )
n935 = nand( n933, xenc1 )
n809 = nand( n933, n801, xenc1 )
n811 = nand( n815, n936 )
result_o[32] = nand( xenc24, n822 )
n808 = nand( n994, n810 )
n860 = nand( add1_i[24], n863 )
n881 = nand( n883, n882 )
n883 = nand( add2_i[19], xenc56 )
n901 = nand( add1_i[16], n904 )
n904 = nand( n905, n906 )
n923 = nand( add1_i[11], n926 )
n932 = nand( add2_i[9], xenc12 )
n936 = nand( add2_i[7], n814 )
n955 = nand( add1_i[3], xenc10 )
n961 = nand( add1_i[1], n886 )
n963 = or( n886, add1_i[1] )
n822 = nand( add2_i[31], n823 )
n895 = nor( xenc39, n897 )
n825 = nand( add1_i[30], xenc14 )
n796 = not( n991 )
n858 = nand( n859, add2_i[25] )
n866 = nand( add2_i[23], n867 )
n870 = nand( add2_i[22], n871 )
n874 = nand( add2_i[21], n875 )
n882 = nand( xenc33, add1_i[19] )
n799 = not( n897 )
n906 = nand( add2_i[15], n907 )
n909 = nand( add1_i[14], n912 )
n920 = nand( add2_i[12], xenc41 )
n929 = nand( add2_i[10], xenc53 )
n944 = nand( n984, n803, xenc9 )
n814 = nand( n984, n803, xenc11 )
n942 = nand( add1_i[7], n816, add2_i[6] )
n941 = or( n984, n803 )
n953 = nand( n818, add2_i[4] )
n959 = nand( add2_i[2], n837 )
xenc0 = xor( n862, keyinput0 )
xenc1 = xor( n934, keyinput1 )
result_o[1] = xor( xenc2, keyinput2 )
xenc3 = xnor( n878, keyinput3 )
xenc4 = xor( n870, keyinput4 )
xenc5 = xnor( n974, keyinput5 )
xenc6 = xnor( n962, keyinput6 )
xenc7 = xor( n942, keyinput7 )
result_o[25] = xnor( xenc8, keyinput8 )
xenc9 = xor( n945, keyinput9 )
xenc10 = xor( n819, keyinput10 )
xenc11 = xor( n938, keyinput11 )
xenc12 = xnor( n809, keyinput12 )
xenc13 = xnor( n845, keyinput13 )
xenc14 = xor( n828, keyinput14 )
xenc15 = xor( n946, keyinput15 )
xenc16 = xor( n972, keyinput16 )
xenc17 = xnor( n919, keyinput17 )
xenc18 = xnor( n856, keyinput18 )
xenc19 = xor( n895, keyinput19 )
xenc20 = xnor( n891, keyinput20 )
xenc21 = xnor( n922, keyinput21 )
result_o[12] = xnor( xenc22, keyinput22 )
result_o[22] = xor( xenc23, keyinput23 )
xenc24 = xnor( n821, keyinput24 )
xenc25 = xnor( n987, keyinput25 )
result_o[21] = xnor( xenc26, keyinput26 )
xenc27 = xor( n874, keyinput27 )
xenc28 = xnor( n965, keyinput28 )
xenc29 = xor( n854, keyinput29 )
xenc30 = xnor( n909, keyinput30 )
xenc31 = xor( n840, keyinput31 )
xenc32 = xnor( n887, keyinput32 )
xenc33 = xor( n885, keyinput33 )
xenc34 = xor( n868, keyinput34 )
xenc35 = xor( n927, keyinput35 )
xenc36 = xnor( n841, keyinput36 )
xenc37 = xor( n989, keyinput37 )
result_o[26] = xnor( xenc38, keyinput38 )
xenc39 = xnor( n896, keyinput39 )
result_o[31] = xnor( xenc40, keyinput40 )
xenc41 = xor( n921, keyinput41 )
xenc42 = xor( n820, keyinput42 )
xenc43 = xor( n957, keyinput43 )
xenc44 = xor( n797, keyinput44 )
result_o[30] = xnor( xenc45, keyinput45 )
xenc46 = xnor( n861, keyinput46 )
xenc47 = xnor( n808, keyinput47 )
result_o[2] = xor( xenc48, keyinput48 )
xenc49 = xnor( n824, keyinput49 )
xenc50 = xor( n920, keyinput50 )
xenc51 = xor( n943, keyinput51 )
result_o[9] = xnor( xenc52, keyinput52 )
xenc53 = xnor( n930, keyinput53 )
result_o[20] = xnor( xenc54, keyinput54 )
xenc55 = xor( n890, keyinput55 )
xenc56 = xnor( n884, keyinput56 )
result_o[3] = xnor( xenc57, keyinput57 )
xenc58 = xnor( n981, keyinput58 )
result_o[19] = xor( xenc59, keyinput59 )
xenc60 = xor( n961, keyinput60 )
xenc61 = xnor( n850, keyinput61 )
xenc62 = xnor( n1008, keyinput62 )
result_o[23] = xor( xenc63, keyinput63 )
