# BENCH FILE 
# circuit:ripple_carry_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput1)
INPUT(keyinput0)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( add2_i[9], n47 )
result_o[8] = xor( add2_i[8], n48 )
result_o[7] = xor( add2_i[7], n49 )
result_o[6] = xor( add2_i[6], n50 )
result_o[5] = xor( add2_i[5], n51 )
result_o[4] = xor( add2_i[4], n52 )
result_o[3] = xor( add2_i[3], n53 )
result_o[2] = xor( add2_i[2], n54 )
result_o[1] = xor( n55, add2_i[1] )
result_o[15] = xor( add2_i[15], n58 )
n58 = xor( n59, add1_i[15] )
result_o[14] = xor( add2_i[14], n62 )
n62 = xor( n63, add1_i[14] )
result_o[13] = xor( add2_i[13], n66 )
n66 = xor( n67, add1_i[13] )
result_o[12] = xor( add2_i[12], n70 )
n70 = xor( n71, add1_i[12] )
result_o[11] = xor( add2_i[11], n74 )
n74 = xor( n75, add1_i[11] )
result_o[10] = xor( add2_i[10], n78 )
n78 = xor( n79, add1_i[10] )
n47 = xor( n82, add1_i[9] )
n48 = xor( n85, add1_i[8] )
n49 = xor( n88, add1_i[7] )
n50 = xor( n91, add1_i[6] )
n51 = xor( n94, add1_i[5] )
n52 = xor( n97, add1_i[4] )
n53 = xor( n100, add1_i[3] )
n54 = xor( n103, add1_i[2] )
n55 = xor( n106, add1_i[1] )
n106 = or( add2_i[0], add1_i[0] )
n100 = nand( n101, n102 )
n101 = nand( add1_i[2], n103 )
n102 = nand( add2_i[2], n54 )
n97 = nand( n98, n99 )
n98 = nand( add1_i[3], n100 )
n99 = nand( add2_i[3], n53 )
n94 = nand( n95, n96 )
n95 = nand( add1_i[4], n97 )
n96 = nand( add2_i[4], n52 )
n91 = nand( n92, n93 )
n92 = nand( add1_i[5], n94 )
n93 = nand( add2_i[5], n51 )
n79 = nand( n80, n81 )
n80 = nand( add1_i[9], n82 )
n81 = nand( add2_i[9], n47 )
n75 = nand( n76, n77 )
n76 = nand( add1_i[10], n79 )
n77 = nand( add2_i[10], n78 )
n71 = nand( n72, n73 )
n72 = nand( add1_i[11], n75 )
n73 = nand( add2_i[11], n74 )
n67 = nand( n68, n69_ant0 )
n68 = nand( add1_i[12], n71 )
n69 = nand( add2_i[12], n70 )
n63 = nand( n64, n65 )
n64 = nand( add1_i[13], n67 )
n65 = nand( add2_i[13], n66 )
n59 = nand( n60, n61 )
n60 = nand( add1_i[14], n63 )
n61 = nand( add2_i[14], n62 )
n88 = nand( n89, n90 )
n89 = nand( add1_i[6], n91 )
n90 = nand( add2_i[6], n50 )
n85 = nand( n86, n87 )
n86 = nand( add1_i[7], n88 )
n87 = nand( add2_i[7], n49 )
n82 = nand( n83, n84 )
n83 = nand( add1_i[8], n85 )
n84 = nand( add2_i[8], n48 )
n103 = nand( n104, n105 )
n105 = nand( add1_i[1], n106 )
n104 = nand( add2_i[1], n55 )
result_o[16] = nand( n56, n57 )
n56 = nand( add1_i[15], n59 )
n57 = nand( add2_i[15], n58 )
result_o[0] = nand( n106, n107 )
n107 = nand( add2_i[0], add1_i[0] )
n69_ant0 = xor( n69, antisat_out )
inter18_0 = and( in0xor_0, in1xor_0 )
inter17_0 = and( in2xor_0, in3xor_0 )
inter16_0 = and( in4xor_0, in5xor_0 )
inter15_0 = and( in6xor_0, in7xor_0 )
inter14_0 = and( in8xor_0, in9xor_0 )
inter13_0 = and( in10xor_0, in11xor_0 )
inter12_0 = and( in12xor_0, in13xor_0 )
inter11_0 = and( in14xor_0, in15xor_0 )
inter10_0 = and( in16xor_0, in17xor_0 )
inter9_0 = and( in18xor_0, in19xor_0 )
inter8_0 = and( inter18_0, inter17_0 )
inter7_0 = and( inter16_0, inter15_0 )
inter6_0 = and( inter14_0, inter13_0 )
inter5_0 = and( inter12_0, inter11_0 )
inter4_0 = and( inter10_0, inter9_0 )
inter3_0 = and( inter8_0, inter7_0 )
inter2_0 = and( inter6_0, inter5_0 )
inter1_0 = and( inter4_0, inter3_0 )
antisat_g_0 = and( inter2_0, inter1_0 )
in0xor_0 = xor( add1_i[11], keyinput0 )
in1xor_0 = xor( add1_i[3], keyinput1 )
in2xor_0 = xor( add2_i[8], keyinput2 )
in3xor_0 = xor( add1_i[7], keyinput3 )
in4xor_0 = xor( add1_i[9], keyinput4 )
in5xor_0 = xor( add1_i[6], keyinput5 )
in6xor_0 = xor( add1_i[12], keyinput6 )
in7xor_0 = xor( add2_i[5], keyinput7 )
in8xor_0 = xor( add2_i[3], keyinput8 )
in9xor_0 = xor( add1_i[15], keyinput9 )
in10xor_0 = xor( add2_i[12], keyinput10 )
in11xor_0 = xor( add2_i[4], keyinput11 )
in12xor_0 = xor( add2_i[11], keyinput12 )
in13xor_0 = xor( add1_i[1], keyinput13 )
in14xor_0 = xor( add1_i[5], keyinput14 )
in15xor_0 = xor( add1_i[2], keyinput15 )
in16xor_0 = xor( add2_i[15], keyinput16 )
in17xor_0 = xor( add2_i[2], keyinput17 )
in18xor_0 = xor( add2_i[10], keyinput18 )
in19xor_0 = xor( add1_i[10], keyinput19 )
inter18_b_0 = and( in0xor_b_0, in1xor_b_0 )
inter17_b_0 = and( in2xor_b_0, in3xor_b_0 )
inter16_b_0 = and( in4xor_b_0, in5xor_b_0 )
inter15_b_0 = and( in6xor_b_0, in7xor_b_0 )
inter14_b_0 = and( in8xor_b_0, in9xor_b_0 )
inter13_b_0 = and( in10xor_b_0, in11xor_b_0 )
inter12_b_0 = and( in12xor_b_0, in13xor_b_0 )
inter11_b_0 = and( in14xor_b_0, in15xor_b_0 )
inter10_b_0 = and( in16xor_b_0, in17xor_b_0 )
inter9_b_0 = and( in18xor_b_0, in19xor_b_0 )
inter8_b_0 = and( inter18_b_0, inter17_b_0 )
inter7_b_0 = and( inter16_b_0, inter15_b_0 )
inter6_b_0 = and( inter14_b_0, inter13_b_0 )
inter5_b_0 = and( inter12_b_0, inter11_b_0 )
inter4_b_0 = and( inter10_b_0, inter9_b_0 )
inter3_b_0 = and( inter8_b_0, inter7_b_0 )
inter2_b_0 = and( inter6_b_0, inter5_b_0 )
inter1_b_0 = and( inter4_b_0, inter3_b_0 )
inter0_b_0 = and( inter2_b_0, inter1_b_0 )
in0xor_b_0 = xor( add1_i[11], keyinput20 )
in1xor_b_0 = xor( add1_i[3], keyinput21 )
in2xor_b_0 = xor( add2_i[8], keyinput22 )
in3xor_b_0 = xor( add1_i[7], keyinput23 )
in4xor_b_0 = xor( add1_i[9], keyinput24 )
in5xor_b_0 = xor( add1_i[6], keyinput25 )
in6xor_b_0 = xor( add1_i[12], keyinput26 )
in7xor_b_0 = xor( add2_i[5], keyinput27 )
in8xor_b_0 = xor( add2_i[3], keyinput28 )
in9xor_b_0 = xor( add1_i[15], keyinput29 )
in10xor_b_0 = xor( add2_i[12], keyinput30 )
in11xor_b_0 = xor( add2_i[4], keyinput31 )
in12xor_b_0 = xor( add2_i[11], keyinput32 )
in13xor_b_0 = xor( add1_i[1], keyinput33 )
in14xor_b_0 = xor( add1_i[5], keyinput34 )
in15xor_b_0 = xor( add1_i[2], keyinput35 )
in16xor_b_0 = xor( add2_i[15], keyinput36 )
in17xor_b_0 = xor( add2_i[2], keyinput37 )
in18xor_b_0 = xor( add2_i[10], keyinput38 )
in19xor_b_0 = xor( add1_i[10], keyinput39 )
antisat_gbar_0 = not( inter0_b_0 )
antisat_out = and( antisat_g_0, antisat_gbar_0 )
