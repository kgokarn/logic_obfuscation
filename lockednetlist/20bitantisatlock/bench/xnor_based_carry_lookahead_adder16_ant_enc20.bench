# BENCH FILE 
# circuit:xnor_based_carry_lookahead_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput1)
INPUT(keyinput0)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( n64, n65 )
n65 = xor( add2_i[9], add1_i[9] )
result_o[8] = xor( n66, n67 )
n67 = xor( add2_i[8], add1_i[8] )
result_o[7] = xor( n68, n69 )
n69 = xor( add2_i[7], add1_i[7] )
result_o[6] = xor( n70, n71 )
n71 = xor( add2_i[6], add1_i[6] )
result_o[5] = xor( n72, n73 )
n73 = xor( add2_i[5], add1_i[5] )
result_o[4] = xor( n74, n75 )
n75 = xor( add2_i[4], add1_i[4] )
n81 = xor( add2_i[1], add1_i[1] )
result_o[15] = xor( n85, n86 )
n86 = xor( add2_i[15], add1_i[15] )
result_o[14] = xor( n90, n91 )
n91 = xor( add2_i[14], add1_i[14] )
result_o[13] = xor( n95, n96 )
n96 = xor( add2_i[13], add1_i[13] )
result_o[12] = xor( n100, n101 )
n101 = xor( add2_i[12], add1_i[12] )
result_o[11] = xor( n105, n106 )
n106 = xor( add2_i[11], add1_i[11] )
result_o[10] = xor( n110, n111 )
n111 = xor( add2_i[10], add1_i[10] )
n63 = not( n80 )
n80 = nor( add2_i[0], add1_i[0] )
n72 = nand( n127, n128 )
n127 = nand( add1_i[4], n74 )
n128 = nand( add2_i[4], n129 )
n129 = or( n74, add1_i[4] )
n95 = nand( n97, n98 )
n97 = nand( add1_i[12], n100 )
n98 = nand( add2_i[12], n99 )
n99 = or( n100, add1_i[12] )
n90 = nand( n92, n93 )
n92 = nand( add1_i[13], n95 )
n93 = nand( add2_i[13], n94 )
n94 = or( n95, add1_i[13] )
n85 = nand( n87, n88 )
n87 = nand( add1_i[14], n90 )
n88 = nand( add2_i[14], n89 )
n89 = or( n90, add1_i[14] )
n79 = nand( n136, n137 )
n136 = nand( add1_i[1], n63 )
n137 = nand( add2_i[1], n138 )
n138 = or( n63, add1_i[1] )
n77 = nand( n133, n134 )
n133 = nand( add1_i[2], n79 )
n134 = nand( add2_i[2], n135 )
n135 = or( n79, add1_i[2] )
n74 = nand( n130, n131 )
n130 = nand( add1_i[3], n77 )
n131 = nand( add2_i[3], n132 )
n132 = or( n77, add1_i[3] )
n70 = nand( n124, n125 )
n124 = nand( add1_i[5], n72 )
n125 = nand( add2_i[5], n126 )
n126 = or( n72, add1_i[5] )
n68 = nand( n121, n122 )
n121 = nand( add1_i[6], n70 )
n122 = nand( add2_i[6], n123 )
n123 = or( n70, add1_i[6] )
n66 = nand( n118, n119 )
n118 = nand( add1_i[7], n68 )
n119 = nand( add2_i[7], n120 )
n120 = or( n68, add1_i[7] )
n64 = nand( n115, n116 )
n115 = nand( add1_i[8], n66 )
n116 = nand( add2_i[8], n117_ant0 )
n117 = or( n66, add1_i[8] )
n110 = nand( n112, n113 )
n112 = nand( add1_i[9], n64 )
n113 = nand( add2_i[9], n114 )
n114 = or( n64, add1_i[9] )
n105 = nand( n107, n108 )
n107 = nand( add1_i[10], n110 )
n108 = nand( add2_i[10], n109 )
n109 = or( n110, add1_i[10] )
n100 = nand( n102, n103 )
n102 = nand( add1_i[11], n105 )
n103 = nand( add2_i[11], n104 )
n104 = or( n105, add1_i[11] )
result_o[16] = nand( n82, n83 )
n82 = nand( add1_i[15], n85 )
n83 = nand( add2_i[15], n84 )
n84 = or( n85, add1_i[15] )
result_o[1] = nor( n80, n81 )
result_o[2] = and( n79, n140 )
n140 = xnor( add2_i[2], add1_i[2] )
result_o[3] = and( n77, n141 )
n141 = xnor( add2_i[3], add1_i[3] )
result_o[0] = nand( n63, n139 )
n139 = nand( add2_i[0], add1_i[0] )
n117_ant0 = xor( n117, antisat_out )
inter18_0 = and( in0xor_0, in1xor_0 )
inter17_0 = and( in2xor_0, in3xor_0 )
inter16_0 = and( in4xor_0, in5xor_0 )
inter15_0 = and( in6xor_0, in7xor_0 )
inter14_0 = and( in8xor_0, in9xor_0 )
inter13_0 = and( in10xor_0, in11xor_0 )
inter12_0 = and( in12xor_0, in13xor_0 )
inter11_0 = and( in14xor_0, in15xor_0 )
inter10_0 = and( in16xor_0, in17xor_0 )
inter9_0 = and( in18xor_0, in19xor_0 )
inter8_0 = and( inter18_0, inter17_0 )
inter7_0 = and( inter16_0, inter15_0 )
inter6_0 = and( inter14_0, inter13_0 )
inter5_0 = and( inter12_0, inter11_0 )
inter4_0 = and( inter10_0, inter9_0 )
inter3_0 = and( inter8_0, inter7_0 )
inter2_0 = and( inter6_0, inter5_0 )
inter1_0 = and( inter4_0, inter3_0 )
antisat_g_0 = and( inter2_0, inter1_0 )
in0xor_0 = xor( n138, keyinput0 )
in1xor_0 = xor( add1_i[0], keyinput1 )
in2xor_0 = xor( add2_i[3], keyinput2 )
in3xor_0 = xor( add2_i[0], keyinput3 )
in4xor_0 = xor( add2_i[1], keyinput4 )
in5xor_0 = xor( add1_i[1], keyinput5 )
in6xor_0 = xor( add2_i[4], keyinput6 )
in7xor_0 = xor( add1_i[8], keyinput7 )
in8xor_0 = xor( add2_i[5], keyinput8 )
in9xor_0 = xor( add1_i[2], keyinput9 )
in10xor_0 = xor( add1_i[7], keyinput10 )
in11xor_0 = xor( add2_i[7], keyinput11 )
in12xor_0 = xor( add1_i[4], keyinput12 )
in13xor_0 = xor( add1_i[6], keyinput13 )
in14xor_0 = xor( add2_i[6], keyinput14 )
in15xor_0 = xor( add1_i[3], keyinput15 )
in16xor_0 = xor( add1_i[5], keyinput16 )
in17xor_0 = xor( add2_i[2], keyinput17 )
in18xor_0 = xor( n121, keyinput18 )
in19xor_0 = xor( n74, keyinput19 )
inter18_b_0 = and( in0xor_b_0, in1xor_b_0 )
inter17_b_0 = and( in2xor_b_0, in3xor_b_0 )
inter16_b_0 = and( in4xor_b_0, in5xor_b_0 )
inter15_b_0 = and( in6xor_b_0, in7xor_b_0 )
inter14_b_0 = and( in8xor_b_0, in9xor_b_0 )
inter13_b_0 = and( in10xor_b_0, in11xor_b_0 )
inter12_b_0 = and( in12xor_b_0, in13xor_b_0 )
inter11_b_0 = and( in14xor_b_0, in15xor_b_0 )
inter10_b_0 = and( in16xor_b_0, in17xor_b_0 )
inter9_b_0 = and( in18xor_b_0, in19xor_b_0 )
inter8_b_0 = and( inter18_b_0, inter17_b_0 )
inter7_b_0 = and( inter16_b_0, inter15_b_0 )
inter6_b_0 = and( inter14_b_0, inter13_b_0 )
inter5_b_0 = and( inter12_b_0, inter11_b_0 )
inter4_b_0 = and( inter10_b_0, inter9_b_0 )
inter3_b_0 = and( inter8_b_0, inter7_b_0 )
inter2_b_0 = and( inter6_b_0, inter5_b_0 )
inter1_b_0 = and( inter4_b_0, inter3_b_0 )
inter0_b_0 = and( inter2_b_0, inter1_b_0 )
in0xor_b_0 = xor( n138, keyinput20 )
in1xor_b_0 = xor( add1_i[0], keyinput21 )
in2xor_b_0 = xor( add2_i[3], keyinput22 )
in3xor_b_0 = xor( add2_i[0], keyinput23 )
in4xor_b_0 = xor( add2_i[1], keyinput24 )
in5xor_b_0 = xor( add1_i[1], keyinput25 )
in6xor_b_0 = xor( add2_i[4], keyinput26 )
in7xor_b_0 = xor( add1_i[8], keyinput27 )
in8xor_b_0 = xor( add2_i[5], keyinput28 )
in9xor_b_0 = xor( add1_i[2], keyinput29 )
in10xor_b_0 = xor( add1_i[7], keyinput30 )
in11xor_b_0 = xor( add2_i[7], keyinput31 )
in12xor_b_0 = xor( add1_i[4], keyinput32 )
in13xor_b_0 = xor( add1_i[6], keyinput33 )
in14xor_b_0 = xor( add2_i[6], keyinput34 )
in15xor_b_0 = xor( add1_i[3], keyinput35 )
in16xor_b_0 = xor( add1_i[5], keyinput36 )
in17xor_b_0 = xor( add2_i[2], keyinput37 )
in18xor_b_0 = xor( n121, keyinput38 )
in19xor_b_0 = xor( n74, keyinput39 )
antisat_gbar_0 = not( inter0_b_0 )
antisat_out = and( antisat_g_0, antisat_gbar_0 )
