# BENCH FILE 
# circuit:lower_part_or_ripple_carry_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput1)
INPUT(keyinput0)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( add2_i[9], n36 )
result_o[8] = xor( add2_i[8], n37 )
result_o[7] = xor( add2_i[7], n38 )
result_o[6] = xor( add2_i[6], n39 )
result_o[5] = xor( add2_i[5], n40 )
result_o[4] = xor( add2_i[4], n41 )
result_o[15] = xor( add2_i[15], n44 )
n44 = xor( n45, add1_i[15] )
result_o[14] = xor( add2_i[14], n48 )
n48 = xor( n49_ant0, add1_i[14] )
result_o[13] = xor( add2_i[13], n52 )
n52 = xor( n53, add1_i[13] )
result_o[12] = xor( add2_i[12], n56 )
n56 = xor( n57, add1_i[12] )
result_o[11] = xor( add2_i[11], n60 )
n60 = xor( n61, add1_i[11] )
result_o[10] = xor( add2_i[10], n64 )
n64 = xor( n65, add1_i[10] )
n36 = xor( n68, add1_i[9] )
n37 = xor( n71, add1_i[8] )
n38 = xor( n74, add1_i[7] )
n39 = xor( n77, add1_i[6] )
n40 = xor( n80, add1_i[5] )
n41 = xnor( n83, add1_i[4] )
n83 = nand( add2_i[3], add1_i[3] )
n77 = nand( n78, n79 )
n78 = nand( add1_i[5], n80 )
n79 = nand( add2_i[5], n40 )
n74 = nand( n75, n76 )
n75 = nand( add1_i[6], n77 )
n76 = nand( add2_i[6], n39 )
n53 = nand( n54, n55 )
n54 = nand( add1_i[12], n57 )
n55 = nand( add2_i[12], n56 )
n49 = nand( n50, n51 )
n50 = nand( add1_i[13], n53 )
n51 = nand( add2_i[13], n52 )
n45 = nand( n46, n47 )
n46 = nand( add1_i[14], n49_ant0 )
n47 = nand( add2_i[14], n48 )
n80 = nand( n81, n82 )
n82 = nand( add1_i[4], add1_i[3], add2_i[3] )
n81 = nand( add2_i[4], n41 )
n71 = nand( n72, n73 )
n72 = nand( add1_i[7], n74 )
n73 = nand( add2_i[7], n38 )
n68 = nand( n69, n70 )
n69 = nand( add1_i[8], n71 )
n70 = nand( add2_i[8], n37 )
n65 = nand( n66, n67 )
n66 = nand( add1_i[9], n68 )
n67 = nand( add2_i[9], n36 )
n61 = nand( n62, n63 )
n62 = nand( add1_i[10], n65 )
n63 = nand( add2_i[10], n64 )
n57 = nand( n58, n59 )
n58 = nand( add1_i[11], n61 )
n59 = nand( add2_i[11], n60 )
result_o[16] = nand( n42, n43 )
n42 = nand( add1_i[15], n45 )
n43 = nand( add2_i[15], n44 )
result_o[0] = or( add1_i[0], add2_i[0] )
result_o[1] = or( add1_i[1], add2_i[1] )
result_o[2] = or( add1_i[2], add2_i[2] )
result_o[3] = or( add2_i[3], add1_i[3] )
n49_ant0 = xor( n49, antisat_out )
inter18_0 = and( in0xor_0, in1xor_0 )
inter17_0 = and( in2xor_0, in3xor_0 )
inter16_0 = and( in4xor_0, in5xor_0 )
inter15_0 = and( in6xor_0, in7xor_0 )
inter14_0 = and( in8xor_0, in9xor_0 )
inter13_0 = and( in10xor_0, in11xor_0 )
inter12_0 = and( in12xor_0, in13xor_0 )
inter11_0 = and( in14xor_0, in15xor_0 )
inter10_0 = and( in16xor_0, in17xor_0 )
inter9_0 = and( in18xor_0, in19xor_0 )
inter8_0 = and( inter18_0, inter17_0 )
inter7_0 = and( inter16_0, inter15_0 )
inter6_0 = and( inter14_0, inter13_0 )
inter5_0 = and( inter12_0, inter11_0 )
inter4_0 = and( inter10_0, inter9_0 )
inter3_0 = and( inter8_0, inter7_0 )
inter2_0 = and( inter6_0, inter5_0 )
inter1_0 = and( inter4_0, inter3_0 )
antisat_g_0 = and( inter2_0, inter1_0 )
in0xor_0 = xor( add2_i[6], keyinput0 )
in1xor_0 = xor( add1_i[6], keyinput1 )
in2xor_0 = xor( add2_i[1], keyinput2 )
in3xor_0 = xor( add1_i[8], keyinput3 )
in4xor_0 = xor( add1_i[1], keyinput4 )
in5xor_0 = xor( add1_i[15], keyinput5 )
in6xor_0 = xor( add2_i[11], keyinput6 )
in7xor_0 = xor( add2_i[0], keyinput7 )
in8xor_0 = xor( add1_i[3], keyinput8 )
in9xor_0 = xor( add1_i[4], keyinput9 )
in10xor_0 = xor( add1_i[14], keyinput10 )
in11xor_0 = xor( add2_i[3], keyinput11 )
in12xor_0 = xor( add1_i[10], keyinput12 )
in13xor_0 = xor( add2_i[7], keyinput13 )
in14xor_0 = xor( add1_i[0], keyinput14 )
in15xor_0 = xor( add1_i[13], keyinput15 )
in16xor_0 = xor( add2_i[9], keyinput16 )
in17xor_0 = xor( add2_i[12], keyinput17 )
in18xor_0 = xor( add1_i[7], keyinput18 )
in19xor_0 = xor( add1_i[9], keyinput19 )
inter18_b_0 = and( in0xor_b_0, in1xor_b_0 )
inter17_b_0 = and( in2xor_b_0, in3xor_b_0 )
inter16_b_0 = and( in4xor_b_0, in5xor_b_0 )
inter15_b_0 = and( in6xor_b_0, in7xor_b_0 )
inter14_b_0 = and( in8xor_b_0, in9xor_b_0 )
inter13_b_0 = and( in10xor_b_0, in11xor_b_0 )
inter12_b_0 = and( in12xor_b_0, in13xor_b_0 )
inter11_b_0 = and( in14xor_b_0, in15xor_b_0 )
inter10_b_0 = and( in16xor_b_0, in17xor_b_0 )
inter9_b_0 = and( in18xor_b_0, in19xor_b_0 )
inter8_b_0 = and( inter18_b_0, inter17_b_0 )
inter7_b_0 = and( inter16_b_0, inter15_b_0 )
inter6_b_0 = and( inter14_b_0, inter13_b_0 )
inter5_b_0 = and( inter12_b_0, inter11_b_0 )
inter4_b_0 = and( inter10_b_0, inter9_b_0 )
inter3_b_0 = and( inter8_b_0, inter7_b_0 )
inter2_b_0 = and( inter6_b_0, inter5_b_0 )
inter1_b_0 = and( inter4_b_0, inter3_b_0 )
inter0_b_0 = and( inter2_b_0, inter1_b_0 )
in0xor_b_0 = xor( add2_i[6], keyinput20 )
in1xor_b_0 = xor( add1_i[6], keyinput21 )
in2xor_b_0 = xor( add2_i[1], keyinput22 )
in3xor_b_0 = xor( add1_i[8], keyinput23 )
in4xor_b_0 = xor( add1_i[1], keyinput24 )
in5xor_b_0 = xor( add1_i[15], keyinput25 )
in6xor_b_0 = xor( add2_i[11], keyinput26 )
in7xor_b_0 = xor( add2_i[0], keyinput27 )
in8xor_b_0 = xor( add1_i[3], keyinput28 )
in9xor_b_0 = xor( add1_i[4], keyinput29 )
in10xor_b_0 = xor( add1_i[14], keyinput30 )
in11xor_b_0 = xor( add2_i[3], keyinput31 )
in12xor_b_0 = xor( add1_i[10], keyinput32 )
in13xor_b_0 = xor( add2_i[7], keyinput33 )
in14xor_b_0 = xor( add1_i[0], keyinput34 )
in15xor_b_0 = xor( add1_i[13], keyinput35 )
in16xor_b_0 = xor( add2_i[9], keyinput36 )
in17xor_b_0 = xor( add2_i[12], keyinput37 )
in18xor_b_0 = xor( add1_i[7], keyinput38 )
in19xor_b_0 = xor( add1_i[9], keyinput39 )
antisat_gbar_0 = not( inter0_b_0 )
antisat_out = and( antisat_g_0, antisat_gbar_0 )
