# BENCH FILE 
# circuit:almost_correct_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( n98, n99 )
n99 = xor( add2_i[9], add1_i[9] )
xenc2 = xor( xenc16, xenc23 )
n107 = xor( add2_i[8], add1_i[8] )
result_o[7] = xor( n115, xenc10 )
n116 = xor( add2_i[7], add1_i[7] )
result_o[6] = xor( n119, n120 )
n120 = xor( add2_i[6], add1_i[6] )
result_o[5] = xor( n131, n132 )
n132 = xor( add2_i[5], add1_i[5] )
result_o[4] = xor( n134, n135 )
n135 = xor( add2_i[4], add1_i[4] )
result_o[3] = xor( n138, xenc12 )
n139 = xor( add2_i[3], add1_i[3] )
xenc26 = xor( n142, n143 )
n143 = xor( add2_i[2], add1_i[2] )
result_o[1] = xor( xenc0, n148 )
n148 = xor( add2_i[1], add1_i[1] )
result_o[14] = xor( n162, n163 )
n163 = xor( add2_i[14], add1_i[14] )
result_o[13] = xor( n166, n167 )
n167 = xor( add2_i[13], add1_i[13] )
result_o[12] = xor( n178, n179 )
n179 = xor( add2_i[12], add1_i[12] )
result_o[11] = xor( xenc30, n190 )
n190 = xor( add2_i[11], add1_i[11] )
xenc7 = xor( n195, n196 )
n196 = xor( add2_i[10], add1_i[10] )
n89 = not( n100 )
n85 = not( n165 )
n157 = nand( n158, n159 )
n159 = nand( n160, n161 )
n102 = nor( n111, n200 )
n127 = nor( n97, xenc19 )
n183 = nor( n169, n201 )
n201 = nor( n108, n200 )
n100 = nor( n194, n198 )
n198 = and( n102, n104, n127 )
n165 = nor( n161, n173 )
n173 = and( n170, xenc6, xenc4 )
n88 = not( xenc24 )
n170 = and( xenc25, n185 )
n103 = nand( n97, xenc19 )
n194 = nand( n183, xenc3 )
n199 = nand( n92, n102 )
n92 = not( n112 )
n122 = and( n125, xenc13, n126 )
n180 = nand( n170, n181 )
n181 = nand( xenc24, n182 )
n182 = nand( n171, xenc27 )
n90 = not( n183 )
n192 = nand( xenc24, xenc9 )
n193 = nand( n171, n194 )
n93 = not( xenc5 )
n96 = not( n105 )
n91 = not( n111 )
n110 = nand( n112, n113 )
n113 = nand( n94, n104 )
n94 = not( n114 )
n152 = nand( n154, n155 )
n154 = nand( add1_i[14], n157 )
n155 = nand( add2_i[14], n156 )
n156 = or( n157, add1_i[14] )
n161 = nand( xenc14, xenc18 )
n175 = nand( add2_i[12], add1_i[12] )
n176 = nand( n177, xenc6 )
n188 = nand( add2_i[10], add1_i[10] )
n185 = or( add2_i[11], add1_i[11] )
n177 = nand( n186, n187 )
n186 = nand( add2_i[11], add1_i[11] )
n187 = nand( n87, n185 )
n87 = not( n188 )
result_o[16] = nand( n149, n150 )
n149 = nand( add1_i[15], n152 )
n150 = nand( add2_i[15], xenc20 )
n151 = or( n152, add1_i[15] )
n111 = nor( add2_i[7], add1_i[7] )
n200 = nor( add2_i[8], add1_i[8] )
n114 = nor( n127, xenc28 )
n128 = and( n129, xenc13 )
n129 = nand( n105, n130 )
n130 = nand( add1_i[3], n125, add2_i[3] )
n104 = or( add2_i[6], add1_i[6] )
n174 = nand( add1_i[9], add2_i[9] )
n171 = or( add2_i[9], add1_i[9] )
n147 = or( add2_i[0], add1_i[0] )
n112 = nand( add2_i[6], add1_i[6] )
n105 = nand( add2_i[4], add1_i[4] )
n172 = or( add2_i[12], add1_i[12] )
n125 = or( add2_i[4], add1_i[4] )
n189 = nand( n188, n191 )
n191 = nand( xenc11, xenc25 )
n162 = nand( n158, xenc22 )
n164 = nand( n85, n160 )
n131 = nand( n105, xenc17 )
n133 = nand( n134, n125 )
n115 = nand( n112, xenc31 )
n117 = nand( xenc5, n104 )
n178 = nand( n86, xenc8 )
n86 = not( n177 )
n119 = nand( n93, n121 )
n121 = nand( add2_i[1], add1_i[1], n122, xenc21 )
n166 = nand( n165, n168 )
n168 = nand( n169, n170, n171, xenc6 )
n98 = nand( n100, xenc29 )
n101 = nand( n96, n102, xenc13, n104 )
n118 = nand( n114, n124 )
n124 = nand( add1_i[2], n122, add2_i[2] )
n108 = nand( add2_i[7], add1_i[7] )
n158 = nand( add2_i[13], add1_i[13] )
n123 = or( add2_i[2], add1_i[2] )
n126 = or( add2_i[3], add1_i[3] )
n169 = and( add2_i[8], add1_i[8] )
n134 = nand( n136, xenc15 )
n136 = nand( add2_i[3], add1_i[3] )
n137 = nand( n138, n126 )
n138 = nand( n140, n141 )
n140 = nand( add2_i[2], add1_i[2] )
n141 = nand( n142, xenc21 )
n142 = nand( n144, n145 )
n144 = nand( add1_i[1], xenc0 )
n145 = nand( add2_i[1], xenc1 )
n146 = or( xenc0, add1_i[1] )
n160 = or( add2_i[13], add1_i[13] )
n95 = not( add1_i[5] )
n97 = not( add2_i[5] )
result_o[15] = xnor( n153, n152 )
n153 = xnor( add1_i[15], add2_i[15] )
n184 = or( add2_i[10], add1_i[10] )
n106 = nand( n108, n109 )
n109 = nand( n110, n91 )
n195 = nand( xenc24, n197 )
n197 = nand( n171, n89 )
result_o[0] = nand( xenc0, n202 )
n202 = nand( add2_i[0], add1_i[0] )
xenc0 = and( n147, keyinput0 )
xenc1 = or( n146, keyinput1 )
result_o[8] = or( xenc2, keyinput2 )
xenc3 = or( n199, keyinput3 )
xenc4 = or( n88, keyinput4 )
xenc5 = or( n118, keyinput5 )
xenc6 = and( n172, keyinput6 )
result_o[10] = and( xenc7, keyinput7 )
xenc8 = or( n180, keyinput8 )
xenc9 = and( n193, keyinput9 )
xenc10 = or( n116, keyinput10 )
xenc11 = or( n192, keyinput11 )
xenc12 = or( n139, keyinput12 )
xenc13 = or( n103, keyinput13 )
xenc14 = or( n175, keyinput14 )
xenc15 = and( n137, keyinput15 )
xenc16 = and( n106, keyinput16 )
xenc17 = and( n133, keyinput17 )
xenc18 = or( n176, keyinput18 )
xenc19 = and( n95, keyinput19 )
xenc20 = or( n151, keyinput20 )
xenc21 = or( n123, keyinput21 )
xenc22 = and( n164, keyinput22 )
xenc23 = or( n107, keyinput23 )
xenc24 = or( n174, keyinput24 )
xenc25 = or( n184, keyinput25 )
result_o[2] = or( xenc26, keyinput26 )
xenc27 = and( n90, keyinput27 )
xenc28 = and( n128, keyinput28 )
xenc29 = or( n101, keyinput29 )
xenc30 = or( n189, keyinput30 )
xenc31 = or( n117, keyinput31 )
