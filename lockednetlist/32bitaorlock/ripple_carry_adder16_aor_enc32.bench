# BENCH FILE 
# circuit:ripple_carry_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
xenc14 = xor( add2_i[9], n47 )
result_o[8] = xor( add2_i[8], xenc4 )
result_o[7] = xor( add2_i[7], n49 )
xenc21 = xor( add2_i[6], xenc17 )
result_o[5] = xor( add2_i[5], n51 )
xenc28 = xor( add2_i[4], n52 )
xenc12 = xor( add2_i[3], xenc1 )
result_o[2] = xor( add2_i[2], n54 )
result_o[1] = xor( n55, add2_i[1] )
xenc7 = xor( add2_i[15], n58 )
n58 = xor( n59, add1_i[15] )
result_o[14] = xor( add2_i[14], n62 )
n62 = xor( xenc29, add1_i[14] )
xenc30 = xor( add2_i[13], xenc22 )
n66 = xor( xenc11, add1_i[13] )
result_o[12] = xor( add2_i[12], n70 )
n70 = xor( n71, add1_i[12] )
result_o[11] = xor( add2_i[11], n74 )
n74 = xor( xenc15, add1_i[11] )
result_o[10] = xor( add2_i[10], n78 )
n78 = xor( xenc24, add1_i[10] )
n47 = xor( xenc9, add1_i[9] )
n48 = xor( xenc16, add1_i[8] )
n49 = xor( n88, add1_i[7] )
n50 = xor( n91, add1_i[6] )
n51 = xor( n94, add1_i[5] )
n52 = xor( xenc20, add1_i[4] )
n53 = xor( n100, add1_i[3] )
n54 = xor( n103, add1_i[2] )
n55 = xor( n106, add1_i[1] )
n106 = or( add2_i[0], add1_i[0] )
n100 = nand( n101, xenc25 )
n101 = nand( add1_i[2], n103 )
n102 = nand( add2_i[2], n54 )
n97 = nand( n98, n99 )
n98 = nand( add1_i[3], n100 )
n99 = nand( add2_i[3], xenc1 )
n94 = nand( xenc6, n96 )
n95 = nand( add1_i[4], xenc20 )
n96 = nand( add2_i[4], n52 )
n91 = nand( n92, xenc23 )
n92 = nand( add1_i[5], n94 )
n93 = nand( add2_i[5], n51 )
n79 = nand( n80, xenc8 )
n80 = nand( add1_i[9], xenc9 )
n81 = nand( add2_i[9], n47 )
n75 = nand( n76, n77 )
n76 = nand( add1_i[10], xenc24 )
n77 = nand( add2_i[10], n78 )
n71 = nand( xenc5, xenc3 )
n72 = nand( add1_i[11], xenc15 )
n73 = nand( add2_i[11], n74 )
n67 = nand( n68, xenc13 )
n68 = nand( add1_i[12], n71 )
n69 = nand( add2_i[12], n70 )
n63 = nand( n64, xenc10 )
n64 = nand( add1_i[13], xenc11 )
n65 = nand( add2_i[13], xenc22 )
n59 = nand( n60, xenc31 )
n60 = nand( add1_i[14], xenc29 )
n61 = nand( add2_i[14], n62 )
n88 = nand( n89, xenc0 )
n89 = nand( add1_i[6], n91 )
n90 = nand( add2_i[6], xenc17 )
n85 = nand( n86, xenc18 )
n86 = nand( add1_i[7], n88 )
n87 = nand( add2_i[7], n49 )
n82 = nand( xenc27, n84 )
n83 = nand( add1_i[8], xenc16 )
n84 = nand( add2_i[8], xenc4 )
n103 = nand( n104, xenc26 )
n105 = nand( add1_i[1], n106 )
n104 = nand( add2_i[1], n55 )
result_o[16] = nand( xenc19, xenc2 )
n56 = nand( add1_i[15], n59 )
n57 = nand( add2_i[15], n58 )
result_o[0] = nand( n106, n107 )
n107 = nand( add2_i[0], add1_i[0] )
xenc0 = and( n90, keyinput0 )
xenc1 = or( n53, keyinput1 )
xenc2 = and( n57, keyinput2 )
xenc3 = or( n73, keyinput3 )
xenc4 = or( n48, keyinput4 )
xenc5 = or( n72, keyinput5 )
xenc6 = or( n95, keyinput6 )
result_o[15] = and( xenc7, keyinput7 )
xenc8 = and( n81, keyinput8 )
xenc9 = and( n82, keyinput9 )
xenc10 = or( n65, keyinput10 )
xenc11 = or( n67, keyinput11 )
result_o[3] = or( xenc12, keyinput12 )
xenc13 = and( n69, keyinput13 )
result_o[9] = and( xenc14, keyinput14 )
xenc15 = or( n75, keyinput15 )
xenc16 = and( n85, keyinput16 )
xenc17 = or( n50, keyinput17 )
xenc18 = or( n87, keyinput18 )
xenc19 = or( n56, keyinput19 )
xenc20 = and( n97, keyinput20 )
result_o[6] = or( xenc21, keyinput21 )
xenc22 = or( n66, keyinput22 )
xenc23 = and( n93, keyinput23 )
xenc24 = and( n79, keyinput24 )
xenc25 = or( n102, keyinput25 )
xenc26 = or( n105, keyinput26 )
xenc27 = or( n83, keyinput27 )
result_o[4] = or( xenc28, keyinput28 )
xenc29 = or( n63, keyinput29 )
result_o[13] = or( xenc30, keyinput30 )
xenc31 = or( n61, keyinput31 )
