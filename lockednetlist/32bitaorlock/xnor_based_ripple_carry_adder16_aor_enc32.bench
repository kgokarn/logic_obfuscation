# BENCH FILE 
# circuit:xnor_based_ripple_carry_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( add2_i[9], n51 )
xenc9 = xor( add2_i[8], xenc4 )
result_o[7] = xor( add2_i[7], xenc5 )
result_o[6] = xor( add2_i[6], xenc30 )
result_o[5] = xor( n55, add2_i[5] )
xenc12 = xor( n56, add2_i[4] )
result_o[15] = xor( add2_i[15], n65 )
n65 = xor( n66, add1_i[15] )
xenc28 = xor( add2_i[14], n69 )
n69 = xor( n70, add1_i[14] )
xenc15 = xor( add2_i[13], n73 )
n73 = xor( xenc19, add1_i[13] )
result_o[12] = xor( add2_i[12], n77 )
n77 = xor( n78, add1_i[12] )
result_o[11] = xor( add2_i[11], xenc8 )
n81 = xor( n82, add1_i[11] )
xenc10 = xor( add2_i[10], n85 )
n85 = xor( n86, add1_i[10] )
n51 = xor( xenc23, add1_i[9] )
n52 = xor( n92, add1_i[8] )
n53 = xor( xenc1, add1_i[7] )
n54 = xor( xenc27, add1_i[6] )
n55 = xor( xenc13, add1_i[5] )
n56 = xor( n104, add1_i[4] )
n62 = xor( add1_i[1], add2_i[1] )
n59 = xor( add1_i[2], add2_i[2] )
n57 = xor( add1_i[3], add2_i[3] )
result_o[1] = nor( n61, xenc7 )
xenc24 = nor( n47, xenc31 )
n47 = not( xenc21 )
xenc18 = nor( xenc25, n59 )
n48 = not( n60 )
n61 = nor( xenc16, add1_i[0] )
n50 = not( result_o[0] )
result_o[0] = xnor( add1_i[0], add2_i[0] )
n104 = nand( n105, n106 )
n105 = nand( add1_i[3], add2_i[3] )
n106 = nand( xenc31, xenc21 )
n60 = nand( xenc22, xenc0 )
n109 = nand( add1_i[1], add2_i[1] )
n110 = nand( xenc7, n49 )
n49 = not( n61 )
n58 = nand( xenc29, xenc14 )
n107 = nand( add1_i[2], add2_i[2] )
n108 = nand( n59, n60 )
n82 = nand( n83, n84 )
n83 = nand( add1_i[10], n86 )
n84 = nand( add2_i[10], n85 )
n78 = nand( n79, xenc2 )
n79 = nand( add1_i[11], n82 )
n80 = nand( add2_i[11], xenc8 )
n74 = nand( n75, xenc20 )
n75 = nand( add1_i[12], n78 )
n76 = nand( add2_i[12], n77 )
n70 = nand( n71, xenc17 )
n71 = nand( add1_i[13], xenc19 )
n72 = nand( add2_i[13], n73 )
n66 = nand( n67, n68 )
n67 = nand( add1_i[14], n70 )
n68 = nand( add2_i[14], n69 )
n98 = nand( n99, n100 )
n99 = nand( add1_i[5], xenc13 )
n100 = nand( add2_i[5], n55 )
n95 = nand( xenc6, xenc26 )
n96 = nand( add1_i[6], xenc27 )
n97 = nand( add2_i[6], xenc30 )
n92 = nand( n93, n94 )
n93 = nand( add1_i[7], xenc1 )
n94 = nand( add2_i[7], xenc5 )
n89 = nand( n90, n91 )
n90 = nand( add1_i[8], n92 )
n91 = nand( add2_i[8], xenc4 )
n86 = nand( n87, n88 )
n87 = nand( add1_i[9], xenc23 )
n88 = nand( add2_i[9], n51 )
n101 = nand( n102, n103 )
n102 = nand( add1_i[4], n104 )
n103 = nand( add2_i[4], n56 )
result_o[16] = nand( xenc3, xenc11 )
n63 = nand( add1_i[15], n66 )
n64 = nand( add2_i[15], n65 )
xenc0 = and( n110, keyinput0 )
xenc1 = or( n95, keyinput1 )
xenc2 = or( n80, keyinput2 )
xenc3 = and( n63, keyinput3 )
xenc4 = or( n52, keyinput4 )
xenc5 = and( n53, keyinput5 )
xenc6 = and( n96, keyinput6 )
xenc7 = or( n62, keyinput7 )
xenc8 = or( n81, keyinput8 )
result_o[8] = or( xenc9, keyinput9 )
result_o[10] = or( xenc10, keyinput10 )
xenc11 = and( n64, keyinput11 )
result_o[4] = or( xenc12, keyinput12 )
xenc13 = or( n101, keyinput13 )
xenc14 = or( n108, keyinput14 )
result_o[13] = and( xenc15, keyinput15 )
xenc16 = and( n50, keyinput16 )
xenc17 = or( n72, keyinput17 )
result_o[2] = or( xenc18, keyinput18 )
xenc19 = and( n74, keyinput19 )
xenc20 = and( n76, keyinput20 )
xenc21 = and( n58, keyinput21 )
xenc22 = and( n109, keyinput22 )
xenc23 = or( n89, keyinput23 )
result_o[3] = or( xenc24, keyinput24 )
xenc25 = and( n48, keyinput25 )
xenc26 = and( n97, keyinput26 )
xenc27 = and( n98, keyinput27 )
result_o[14] = or( xenc28, keyinput28 )
xenc29 = and( n107, keyinput29 )
xenc30 = or( n54, keyinput30 )
xenc31 = or( n57, keyinput31 )
