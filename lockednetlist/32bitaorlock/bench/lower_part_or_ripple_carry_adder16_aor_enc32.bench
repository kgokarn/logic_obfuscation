# BENCH FILE 
# circuit:lower_part_or_ripple_carry_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
result_o[9] = xor( add2_i[9], n36 )
xenc1 = xor( add2_i[8], xenc22 )
xenc28 = xor( add2_i[7], n38 )
result_o[6] = xor( add2_i[6], xenc11 )
result_o[5] = xor( add2_i[5], n40 )
result_o[4] = xor( add2_i[4], n41 )
result_o[15] = xor( add2_i[15], n44 )
n44 = xor( xenc23, add1_i[15] )
xenc9 = xor( add2_i[14], n48 )
n48 = xor( xenc17, add1_i[14] )
xenc21 = xor( add2_i[13], n52 )
n52 = xor( n53, add1_i[13] )
result_o[12] = xor( add2_i[12], xenc14 )
n56 = xor( n57, add1_i[12] )
xenc31 = xor( add2_i[11], n60 )
n60 = xor( xenc26, add1_i[11] )
result_o[10] = xor( add2_i[10], xenc15 )
n64 = xor( n65, add1_i[10] )
n36 = xor( n68, add1_i[9] )
n37 = xor( n71, add1_i[8] )
n38 = xor( n74, add1_i[7] )
n39 = xor( xenc2, add1_i[6] )
n40 = xor( n80, add1_i[5] )
n41 = xnor( n83, add1_i[4] )
n83 = nand( add2_i[3], add1_i[3] )
n77 = nand( xenc5, n79 )
n78 = nand( add1_i[5], n80 )
n79 = nand( add2_i[5], n40 )
n74 = nand( xenc3, xenc18 )
n75 = nand( add1_i[6], xenc2 )
n76 = nand( add2_i[6], xenc11 )
n53 = nand( xenc13, xenc24 )
n54 = nand( add1_i[12], n57 )
n55 = nand( add2_i[12], xenc14 )
n49 = nand( xenc27, n51 )
n50 = nand( add1_i[13], n53 )
n51 = nand( add2_i[13], n52 )
n45 = nand( xenc16, n47 )
n46 = nand( add1_i[14], xenc17 )
n47 = nand( add2_i[14], n48 )
n80 = nand( xenc6, xenc29 )
n82 = nand( add1_i[4], add1_i[3], add2_i[3] )
n81 = nand( add2_i[4], n41 )
n71 = nand( n72, n73 )
n72 = nand( add1_i[7], n74 )
n73 = nand( add2_i[7], n38 )
n68 = nand( n69, n70 )
n69 = nand( add1_i[8], n71 )
n70 = nand( add2_i[8], xenc22 )
n65 = nand( xenc10, xenc0 )
n66 = nand( add1_i[9], n68 )
n67 = nand( add2_i[9], n36 )
n61 = nand( xenc20, xenc7 )
n62 = nand( add1_i[10], n65 )
n63 = nand( add2_i[10], xenc15 )
n57 = nand( n58, n59 )
n58 = nand( add1_i[11], xenc26 )
n59 = nand( add2_i[11], n60 )
xenc4 = nand( n42, xenc30 )
n42 = nand( add1_i[15], xenc23 )
n43 = nand( add2_i[15], n44 )
xenc19 = or( add1_i[0], add2_i[0] )
xenc8 = or( add1_i[1], add2_i[1] )
xenc12 = or( add1_i[2], add2_i[2] )
xenc25 = or( add2_i[3], add1_i[3] )
xenc0 = or( n67, keyinput0 )
result_o[8] = or( xenc1, keyinput1 )
xenc2 = or( n77, keyinput2 )
xenc3 = or( n75, keyinput3 )
result_o[16] = or( xenc4, keyinput4 )
xenc5 = and( n78, keyinput5 )
xenc6 = and( n81, keyinput6 )
xenc7 = and( n63, keyinput7 )
result_o[1] = and( xenc8, keyinput8 )
result_o[14] = or( xenc9, keyinput9 )
xenc10 = and( n66, keyinput10 )
xenc11 = and( n39, keyinput11 )
result_o[2] = and( xenc12, keyinput12 )
xenc13 = and( n54, keyinput13 )
xenc14 = or( n56, keyinput14 )
xenc15 = and( n64, keyinput15 )
xenc16 = and( n46, keyinput16 )
xenc17 = and( n49, keyinput17 )
xenc18 = or( n76, keyinput18 )
result_o[0] = or( xenc19, keyinput19 )
xenc20 = or( n62, keyinput20 )
result_o[13] = and( xenc21, keyinput21 )
xenc22 = or( n37, keyinput22 )
xenc23 = and( n45, keyinput23 )
xenc24 = or( n55, keyinput24 )
result_o[3] = or( xenc25, keyinput25 )
xenc26 = and( n61, keyinput26 )
xenc27 = or( n50, keyinput27 )
result_o[7] = and( xenc28, keyinput28 )
xenc29 = and( n82, keyinput29 )
xenc30 = or( n43, keyinput30 )
result_o[11] = or( xenc31, keyinput31 )
