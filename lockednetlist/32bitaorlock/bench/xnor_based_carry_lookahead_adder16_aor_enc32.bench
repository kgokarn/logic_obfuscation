# BENCH FILE 
# circuit:xnor_based_carry_lookahead_adder16.bench

INPUT(add1_i[0])
INPUT(add1_i[1])
INPUT(add1_i[2])
INPUT(add1_i[3])
INPUT(add1_i[4])
INPUT(add1_i[5])
INPUT(add1_i[6])
INPUT(add1_i[7])
INPUT(add1_i[8])
INPUT(add1_i[9])
INPUT(add1_i[10])
INPUT(add1_i[11])
INPUT(add1_i[12])
INPUT(add1_i[13])
INPUT(add1_i[14])
INPUT(add1_i[15])
INPUT(add2_i[0])
INPUT(add2_i[1])
INPUT(add2_i[2])
INPUT(add2_i[3])
INPUT(add2_i[4])
INPUT(add2_i[5])
INPUT(add2_i[6])
INPUT(add2_i[7])
INPUT(add2_i[8])
INPUT(add2_i[9])
INPUT(add2_i[10])
INPUT(add2_i[11])
INPUT(add2_i[12])
INPUT(add2_i[13])
INPUT(add2_i[14])
INPUT(add2_i[15])
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
OUTPUT(result_o[0])
OUTPUT(result_o[1])
OUTPUT(result_o[2])
OUTPUT(result_o[3])
OUTPUT(result_o[4])
OUTPUT(result_o[5])
OUTPUT(result_o[6])
OUTPUT(result_o[7])
OUTPUT(result_o[8])
OUTPUT(result_o[9])
OUTPUT(result_o[10])
OUTPUT(result_o[11])
OUTPUT(result_o[12])
OUTPUT(result_o[13])
OUTPUT(result_o[14])
OUTPUT(result_o[15])
OUTPUT(result_o[16])
xenc13 = xor( n64, xenc12 )
n65 = xor( add2_i[9], add1_i[9] )
xenc20 = xor( n66, n67 )
n67 = xor( add2_i[8], add1_i[8] )
xenc30 = xor( n68, n69 )
n69 = xor( add2_i[7], add1_i[7] )
xenc28 = xor( n70, n71 )
n71 = xor( add2_i[6], add1_i[6] )
result_o[5] = xor( n72, xenc7 )
n73 = xor( add2_i[5], add1_i[5] )
xenc10 = xor( n74, n75 )
n75 = xor( add2_i[4], add1_i[4] )
n81 = xor( add2_i[1], add1_i[1] )
result_o[15] = xor( xenc29, xenc31 )
n86 = xor( add2_i[15], add1_i[15] )
result_o[14] = xor( xenc3, n91 )
n91 = xor( add2_i[14], add1_i[14] )
result_o[13] = xor( n95, xenc17 )
n96 = xor( add2_i[13], add1_i[13] )
xenc22 = xor( n100, xenc16 )
n101 = xor( add2_i[12], add1_i[12] )
xenc26 = xor( n105, n106 )
n106 = xor( add2_i[11], add1_i[11] )
result_o[10] = xor( n110, n111 )
n111 = xor( add2_i[10], add1_i[10] )
n63 = not( n80 )
n80 = nor( add2_i[0], add1_i[0] )
n72 = nand( n127, n128 )
n127 = nand( add1_i[4], n74 )
n128 = nand( add2_i[4], xenc21 )
n129 = or( n74, add1_i[4] )
n95 = nand( xenc11, n98 )
n97 = nand( add1_i[12], n100 )
n98 = nand( add2_i[12], xenc19 )
n99 = or( n100, add1_i[12] )
n90 = nand( n92, n93 )
n92 = nand( add1_i[13], n95 )
n93 = nand( add2_i[13], xenc18 )
n94 = or( n95, add1_i[13] )
n85 = nand( n87, n88 )
n87 = nand( add1_i[14], xenc3 )
n88 = nand( add2_i[14], n89 )
n89 = or( xenc3, add1_i[14] )
n79 = nand( n136, xenc24 )
n136 = nand( add1_i[1], n63 )
n137 = nand( add2_i[1], n138 )
n138 = or( n63, add1_i[1] )
n77 = nand( n133, xenc8 )
n133 = nand( add1_i[2], n79 )
n134 = nand( add2_i[2], n135 )
n135 = or( n79, add1_i[2] )
n74 = nand( n130, n131 )
n130 = nand( add1_i[3], xenc1 )
n131 = nand( add2_i[3], n132 )
n132 = or( xenc1, add1_i[3] )
n70 = nand( n124, xenc23 )
n124 = nand( add1_i[5], n72 )
n125 = nand( add2_i[5], n126 )
n126 = or( n72, add1_i[5] )
n68 = nand( n121, xenc15 )
n121 = nand( add1_i[6], n70 )
n122 = nand( add2_i[6], n123 )
n123 = or( n70, add1_i[6] )
n66 = nand( xenc6, n119 )
n118 = nand( add1_i[7], n68 )
n119 = nand( add2_i[7], n120 )
n120 = or( n68, add1_i[7] )
n64 = nand( n115, n116 )
n115 = nand( add1_i[8], n66 )
n116 = nand( add2_i[8], xenc2 )
n117 = or( n66, add1_i[8] )
n110 = nand( n112, n113 )
n112 = nand( add1_i[9], n64 )
n113 = nand( add2_i[9], xenc27 )
n114 = or( n64, add1_i[9] )
n105 = nand( n107, n108 )
n107 = nand( add1_i[10], n110 )
n108 = nand( add2_i[10], xenc9 )
n109 = or( n110, add1_i[10] )
n100 = nand( n102, xenc25 )
n102 = nand( add1_i[11], n105 )
n103 = nand( add2_i[11], n104 )
n104 = or( n105, add1_i[11] )
xenc14 = nand( n82, xenc0 )
n82 = nand( add1_i[15], xenc29 )
n83 = nand( add2_i[15], xenc4 )
n84 = or( xenc29, add1_i[15] )
result_o[1] = nor( n80, n81 )
result_o[2] = and( n79, n140 )
n140 = xnor( add2_i[2], add1_i[2] )
result_o[3] = and( xenc1, n141 )
n141 = xnor( add2_i[3], add1_i[3] )
result_o[0] = nand( n63, xenc5 )
n139 = nand( add2_i[0], add1_i[0] )
xenc0 = and( n83, keyinput0 )
xenc1 = and( n77, keyinput1 )
xenc2 = or( n117, keyinput2 )
xenc3 = and( n90, keyinput3 )
xenc4 = and( n84, keyinput4 )
xenc5 = or( n139, keyinput5 )
xenc6 = or( n118, keyinput6 )
xenc7 = or( n73, keyinput7 )
xenc8 = and( n134, keyinput8 )
xenc9 = and( n109, keyinput9 )
result_o[4] = or( xenc10, keyinput10 )
xenc11 = or( n97, keyinput11 )
xenc12 = or( n65, keyinput12 )
result_o[9] = or( xenc13, keyinput13 )
result_o[16] = or( xenc14, keyinput14 )
xenc15 = and( n122, keyinput15 )
xenc16 = and( n101, keyinput16 )
xenc17 = or( n96, keyinput17 )
xenc18 = or( n94, keyinput18 )
xenc19 = or( n99, keyinput19 )
result_o[8] = or( xenc20, keyinput20 )
xenc21 = or( n129, keyinput21 )
result_o[12] = and( xenc22, keyinput22 )
xenc23 = or( n125, keyinput23 )
xenc24 = and( n137, keyinput24 )
xenc25 = or( n103, keyinput25 )
result_o[11] = or( xenc26, keyinput26 )
xenc27 = or( n114, keyinput27 )
result_o[6] = or( xenc28, keyinput28 )
xenc29 = and( n85, keyinput29 )
result_o[7] = or( xenc30, keyinput30 )
xenc31 = or( n86, keyinput31 )
